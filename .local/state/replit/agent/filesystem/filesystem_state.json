{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OutreachPro\n\n## Overview\n\nOutreachPro is a comprehensive outreach management platform designed to help recruiters and sales professionals track their email campaigns, manage company contacts, and analyze outreach performance. The application provides a complete solution for managing outreach workflows with features including company management, contact tracking, email analytics, and performance reporting.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Framework**: shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: TanStack React Query for server state management and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme System**: Custom theme provider supporting light, dark, and system themes with persistence\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for REST API endpoints\n- **Language**: TypeScript with ES modules for type safety and modern JavaScript features\n- **Database Layer**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **Schema Validation**: Zod for runtime type validation and data parsing\n- **Data Storage**: In-memory storage with mock data for development, designed for PostgreSQL in production\n\n### Database Schema Design\nThe application uses three primary entities:\n- **Companies**: Core entity tracking company information, outreach attempts, and engagement metrics\n- **People**: Individual contacts within companies with their own outreach tracking\n- **Email Stats**: Detailed tracking of individual email attempts with open/click metrics\n\n### API Architecture\n- **Pattern**: RESTful API design with consistent endpoint structure\n- **Endpoints**: CRUD operations for companies, people, and email statistics\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Validation**: Request validation using Zod schemas for data integrity\n\n### Development Architecture\n- **Monorepo Structure**: Shared schema definitions between frontend and backend\n- **Hot Reload**: Vite development server with HMR for rapid development\n- **Type Safety**: End-to-end TypeScript with shared types via the `shared` directory\n- **Path Aliases**: Configured path mapping for clean imports (`@/`, `@shared/`)\n\n## External Dependencies\n\n### Database Services\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL\n- **Drizzle Kit**: Database migrations and schema management\n- **Connection**: Environment-based connection string configuration\n\n### UI Component Libraries\n- **Radix UI**: Comprehensive set of accessible component primitives\n- **Lucide React**: Modern icon library for consistent iconography\n- **Recharts**: Data visualization library for analytics charts and graphs\n\n### Development Tools\n- **Replit Integration**: Custom Vite plugins for Replit development environment\n- **ESBuild**: Fast bundling for production server builds\n- **PostCSS**: CSS processing with Autoprefixer for browser compatibility\n\n### State Management\n- **TanStack React Query**: Server state management with caching, background updates, and optimistic updates\n- **React Hook Form**: Form state management with validation\n\n### Authentication & Session Management\n- **Connect PG Simple**: PostgreSQL session store integration\n- **Express Session**: Server-side session management (configured but not actively used in current implementation)","size_bytes":3753},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/AddCompanyModal_1754062008915.tsx":{"content":"import React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Plus, Trash2 } from 'lucide-react';\n\ninterface Person {\n  name: string;\n  email: string;\n  position: string;\n  linkedin: string;\n}\n\ninterface AddCompanyModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddCompanyModal({ isOpen, onClose }: AddCompanyModalProps) {\n  const [companyName, setCompanyName] = useState('');\n  const [companyWebsite, setCompanyWebsite] = useState('');\n  const [companyLinkedIn, setCompanyLinkedIn] = useState('');\n  const [people, setPeople] = useState<Person[]>([\n    { name: '', email: '', position: '', linkedin: '' }\n  ]);\n\n  const addPerson = () => {\n    if (people.length < 3) {\n      setPeople([...people, { name: '', email: '', position: '', linkedin: '' }]);\n    }\n  };\n\n  const removePerson = (index: number) => {\n    if (people.length > 1) {\n      setPeople(people.filter((_, i) => i !== index));\n    }\n  };\n\n  const updatePerson = (index: number, field: keyof Person, value: string) => {\n    const updatedPeople = [...people];\n    updatedPeople[index][field] = value;\n    setPeople(updatedPeople);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Here you would normally POST to your backend API\n    console.log('Submitting company:', {\n      company: { name: companyName, website: companyWebsite, linkedin: companyLinkedIn },\n      people: people.filter(p => p.name && p.email), // Only include people with at least name and email\n    });\n    \n    // Reset form and close modal\n    setCompanyName('');\n    setCompanyWebsite('');\n    setCompanyLinkedIn('');\n    setPeople([{ name: '', email: '', position: '', linkedin: '' }]);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add New Company</DialogTitle>\n          <DialogDescription>\n            Add a new company to your outreach list and include up to 3 contacts for initial outreach.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Company Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Company Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"company-name\">Company Name *</Label>\n                <Input\n                  id=\"company-name\"\n                  value={companyName}\n                  onChange={(e) => setCompanyName(e.target.value)}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"company-website\">Website</Label>\n                <Input\n                  id=\"company-website\"\n                  value={companyWebsite}\n                  onChange={(e) => setCompanyWebsite(e.target.value)}\n                  placeholder=\"example.com\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"company-linkedin\">LinkedIn URL</Label>\n              <Input\n                id=\"company-linkedin\"\n                value={companyLinkedIn}\n                onChange={(e) => setCompanyLinkedIn(e.target.value)}\n                placeholder=\"https://linkedin.com/company/example\"\n              />\n            </div>\n          </div>\n\n          {/* People Information */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">People ({people.length}/3)</h3>\n              {people.length < 3 && (\n                <Button type=\"button\" variant=\"outline\" onClick={addPerson}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Person\n                </Button>\n              )}\n            </div>\n\n            {people.map((person, index) => (\n              <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Person {index + 1}</h4>\n                  {people.length > 1 && (\n                    <Button \n                      type=\"button\" \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => removePerson(index)}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor={`person-${index}-name`}>Name *</Label>\n                    <Input\n                      id={`person-${index}-name`}\n                      value={person.name}\n                      onChange={(e) => updatePerson(index, 'name', e.target.value)}\n                      required={index === 0}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor={`person-${index}-email`}>Email *</Label>\n                    <Input\n                      id={`person-${index}-email`}\n                      type=\"email\"\n                      value={person.email}\n                      onChange={(e) => updatePerson(index, 'email', e.target.value)}\n                      required={index === 0}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor={`person-${index}-position`}>Position</Label>\n                    <Input\n                      id={`person-${index}-position`}\n                      value={person.position}\n                      onChange={(e) => updatePerson(index, 'position', e.target.value)}\n                      placeholder=\"Software Engineer\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor={`person-${index}-linkedin`}>LinkedIn URL</Label>\n                    <Input\n                      id={`person-${index}-linkedin`}\n                      value={person.linkedin}\n                      onChange={(e) => updatePerson(index, 'linkedin', e.target.value)}\n                      placeholder=\"https://linkedin.com/in/john-doe\"\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              Add Company\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7018},"attached_assets/App_1754062008914.tsx":{"content":"import React, { useState } from 'react';\nimport { Sidebar, SidebarContent, SidebarHeader, SidebarMenu, SidebarMenuItem, SidebarMenuButton, SidebarProvider, SidebarTrigger, SidebarFooter } from './components/ui/sidebar';\nimport { Dashboard } from './components/Dashboard';\nimport { Companies } from './components/Companies';\nimport { CompanyDetail } from './components/CompanyDetail';\nimport { Stats } from './components/Stats';\nimport { Profile } from './components/Profile';\nimport { ThemeProvider } from './components/ThemeProvider';\nimport { QuickThemeToggle } from './components/ThemeToggle';\nimport { Avatar, AvatarFallback, AvatarImage } from './components/ui/avatar';\nimport { BarChart3, Building2, Home, Menu, Settings, User } from 'lucide-react';\n\nexport default function App() {\n  const [currentPage, setCurrentPage] = useState('dashboard');\n  const [selectedCompanyId, setSelectedCompanyId] = useState<number | null>(null);\n\n  const navigation = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home },\n    { id: 'companies', label: 'Companies', icon: Building2 },\n    { id: 'stats', label: 'Stats', icon: BarChart3 },\n  ];\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'dashboard':\n        return <Dashboard onViewCompany={(id) => {\n          setSelectedCompanyId(id);\n          setCurrentPage('company-detail');\n        }} />;\n      case 'companies':\n        return <Companies onViewCompany={(id) => {\n          setSelectedCompanyId(id);\n          setCurrentPage('company-detail');\n        }} />;\n      case 'company-detail':\n        return <CompanyDetail \n          companyId={selectedCompanyId} \n          onBack={() => setCurrentPage('companies')}\n        />;\n      case 'stats':\n        return <Stats />;\n      case 'profile':\n        return <Profile />;\n      default:\n        return <Dashboard onViewCompany={(id) => {\n          setSelectedCompanyId(id);\n          setCurrentPage('company-detail');\n        }} />;\n    }\n  };\n\n  const getPageTitle = () => {\n    switch (currentPage) {\n      case 'dashboard': return 'Dashboard';\n      case 'companies': return 'Companies';\n      case 'company-detail': return 'Company Details';\n      case 'stats': return 'Statistics';\n      case 'profile': return 'Profile & Settings';\n      default: return 'Dashboard';\n    }\n  };\n\n  return (\n    <ThemeProvider defaultTheme=\"system\" storageKey=\"outreach-pro-theme\">\n      <SidebarProvider>\n        <div className=\"flex h-screen bg-background transition-colors duration-300\">\n          <Sidebar>\n            <SidebarHeader className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <span className=\"text-primary-foreground font-bold text-sm\">OP</span>\n                </div>\n                <h2 className=\"text-lg font-semibold\">OutreachPro</h2>\n              </div>\n            </SidebarHeader>\n            \n            <SidebarContent>\n              <SidebarMenu>\n                {navigation.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <SidebarMenuItem key={item.id}>\n                      <SidebarMenuButton\n                        onClick={() => setCurrentPage(item.id)}\n                        isActive={currentPage === item.id}\n                        className=\"w-full\"\n                      >\n                        <Icon className=\"w-4 h-4\" />\n                        {item.label}\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n            </SidebarContent>\n            \n            <SidebarFooter className=\"p-4\">\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton\n                    onClick={() => setCurrentPage('profile')}\n                    isActive={currentPage === 'profile'}\n                    className=\"w-full\"\n                  >\n                    <Settings className=\"w-4 h-4\" />\n                    Settings\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </SidebarMenu>\n              \n              {/* User Profile Section */}\n              <div className=\"mt-4 pt-4 border-t border-sidebar-border\">\n                <div \n                  className=\"flex items-center gap-3 p-2 rounded-lg hover:bg-sidebar-accent cursor-pointer transition-colors\"\n                  onClick={() => setCurrentPage('profile')}\n                >\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src=\"/placeholder-avatar.jpg\" alt=\"Alex Johnson\" />\n                    <AvatarFallback className=\"text-xs\">AJ</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-sidebar-foreground\">Alex Johnson</p>\n                    <p className=\"text-xs text-sidebar-foreground/70 truncate\">alex@outreachpro.com</p>\n                  </div>\n                  <User className=\"w-4 h-4 text-sidebar-foreground/50\" />\n                </div>\n              </div>\n            </SidebarFooter>\n          </Sidebar>\n          \n          <div className=\"flex-1 flex flex-col\">\n            <header className=\"border-b border-border px-6 py-4 flex items-center justify-between bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n              <div className=\"flex items-center gap-4\">\n                <SidebarTrigger className=\"flex items-center justify-center w-10 h-10 border border-border rounded-md hover:bg-accent hover:text-accent-foreground transition-colors\">\n                  <Menu className=\"w-4 h-4\" />\n                </SidebarTrigger>\n                <h1 className=\"text-xl font-semibold\">{getPageTitle()}</h1>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <QuickThemeToggle />\n              </div>\n            </header>\n            \n            <main className=\"flex-1 overflow-auto p-6 bg-background\">\n              {renderPage()}\n            </main>\n          </div>\n        </div>\n      </SidebarProvider>\n    </ThemeProvider>\n  );\n}","size_bytes":6265},"attached_assets/Attributions_1754062008915.md":{"content":"This Figma Make file includes components from [shadcn/ui](https://ui.shadcn.com/) used under [MIT license](https://github.com/shadcn-ui/ui/blob/main/LICENSE.md).\n\nThis Figma Make file includes photos from [Unsplash](https://unsplash.com) used under [license](https://unsplash.com/license).","size_bytes":289},"attached_assets/Companies_1754062008915.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { AddCompanyModal } from './AddCompanyModal';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Input } from './ui/input';\nimport { Plus, Search } from 'lucide-react';\nimport { mockCompanies } from './mockData';\n\ninterface CompaniesProps {\n  onViewCompany: (companyId: number) => void;\n}\n\nexport function Companies({ onViewCompany }: CompaniesProps) {\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const filteredCompanies = mockCompanies.filter(company => {\n    const matchesSearch = company.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         company.website.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    if (filter === 'all') return matchesSearch;\n    if (filter === 'responded') return company.hasResponded && matchesSearch;\n    if (filter === 'not-responded') return !company.hasResponded && matchesSearch;\n    if (filter === 'attempts-left') return company.totalEmails < 3 && matchesSearch;\n    \n    return matchesSearch;\n  });\n\n  const getStatusClasses = (company: any) => {\n    if (company.hasResponded) {\n      return 'border-green-500/30 bg-green-500/5 dark:border-green-400/30 dark:bg-green-400/10';\n    }\n    if (company.totalEmails >= 3) {\n      return 'border-red-500/30 bg-red-500/5 dark:border-red-400/30 dark:bg-red-400/10';\n    }\n    return 'border-yellow-500/30 bg-yellow-500/5 dark:border-yellow-400/30 dark:bg-yellow-400/10';\n  };\n\n  const getProgressBarClasses = (company: any) => {\n    if (company.totalEmails >= 3) {\n      return 'bg-red-500 dark:bg-red-400';\n    }\n    return 'bg-blue-500 dark:bg-blue-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with filters and search */}\n      <div className=\"flex flex-col sm:flex-row gap-4 justify-between\">\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search companies...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 w-64\"\n            />\n          </div>\n          \n          <Select value={filter} onValueChange={setFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter companies\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Companies</SelectItem>\n              <SelectItem value=\"responded\">Responded</SelectItem>\n              <SelectItem value=\"not-responded\">Not Responded</SelectItem>\n              <SelectItem value=\"attempts-left\">Attempts Left</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <Button onClick={() => setShowAddModal(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Company\n        </Button>\n      </div>\n\n      {/* Company Cards Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredCompanies.map((company) => (\n          <Card key={company.id} className={`transition-all hover:shadow-lg border ${getStatusClasses(company)}`}>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <CardTitle className=\"text-lg\">{company.name}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">{company.website}</p>\n                </div>\n                <div className=\"flex flex-col gap-1\">\n                  {company.hasResponded && (\n                    <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300 text-xs\">\n                      Responded\n                    </Badge>\n                  )}\n                  {company.totalEmails >= 3 && !company.hasResponded && (\n                    <Badge variant=\"destructive\" className=\"text-xs\">Max Reached</Badge>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {/* Progress bar for emails sent */}\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span>Emails Sent</span>\n                  <span>{company.totalEmails} / 3</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full transition-colors ${getProgressBarClasses(company)}`}\n                    style={{ width: `${(company.totalEmails / 3) * 100}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* Tracking stats */}\n              <div className=\"grid grid-cols-3 gap-2 text-center\">\n                <div>\n                  <div className=\"text-xs text-muted-foreground\">Opens</div>\n                  <div className={`text-sm font-medium ${\n                    company.hasOpened \n                      ? 'text-green-600 dark:text-green-400' \n                      : 'text-muted-foreground'\n                  }`}>\n                    {company.hasOpened ? `${company.openCount}x` : '0'}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-xs text-muted-foreground\">Clicks</div>\n                  <div className={`text-sm font-medium ${\n                    company.hasClicked \n                      ? 'text-blue-600 dark:text-blue-400' \n                      : 'text-muted-foreground'\n                  }`}>\n                    {company.hasClicked ? `${company.clickCount}x` : '0'}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-xs text-muted-foreground\">Last</div>\n                  <div className=\"text-sm font-medium text-foreground\">{company.lastAttempt}</div>\n                </div>\n              </div>\n\n              <Button \n                className=\"w-full\" \n                variant=\"outline\"\n                onClick={() => onViewCompany(company.id)}\n              >\n                View Details\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredCompanies.length === 0 && (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">No companies found matching your criteria.</p>\n        </div>\n      )}\n\n      <AddCompanyModal \n        isOpen={showAddModal} \n        onClose={() => setShowAddModal(false)} \n      />\n    </div>\n  );\n}","size_bytes":6931},"attached_assets/CompanyDetail_1754062008915.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from './ui/collapsible';\nimport { ArrowLeft, ChevronDown, ChevronRight, ExternalLink, Mail, User } from 'lucide-react';\nimport { mockCompanies, mockPeople, mockEmailStats } from './mockData';\n\ninterface CompanyDetailProps {\n  companyId: number | null;\n  onBack: () => void;\n}\n\nexport function CompanyDetail({ companyId, onBack }: CompanyDetailProps) {\n  const [expandedPerson, setExpandedPerson] = useState<number | null>(null);\n  \n  if (!companyId) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Company not found.</p>\n        <Button onClick={onBack} className=\"mt-4\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Companies\n        </Button>\n      </div>\n    );\n  }\n\n  const company = mockCompanies.find(c => c.id === companyId);\n  const companyPeople = mockPeople.filter(p => p.companyId === companyId);\n\n  if (!company) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Company not found.</p>\n        <Button onClick={onBack} className=\"mt-4\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Companies\n        </Button>\n      </div>\n    );\n  }\n\n  const getPersonEmailStats = (personId: number) => {\n    return mockEmailStats.filter(stat => stat.personId === personId);\n  };\n\n  const canSendEmail = (person: any) => {\n    return person.attempts < 3 && !person.responded;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Back button */}\n      <Button variant=\"outline\" onClick={onBack}>\n        <ArrowLeft className=\"w-4 h-4 mr-2\" />\n        Back to Companies\n      </Button>\n\n      {/* Company header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl\">{company.name}</CardTitle>\n              <div className=\"flex items-center gap-4 mt-2\">\n                <a \n                  href={`https://${company.website}`} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1\"\n                >\n                  {company.website}\n                  <ExternalLink className=\"w-3 h-3\" />\n                </a>\n                <a \n                  href={company.linkedin} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1\"\n                >\n                  LinkedIn\n                  <ExternalLink className=\"w-3 h-3\" />\n                </a>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-muted-foreground\">Total Progress</div>\n              <div className=\"text-2xl font-bold\">{company.totalEmails} / 3</div>\n              <div className=\"text-xs text-muted-foreground\">emails sent</div>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{company.openCount}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Opens</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{company.clickCount}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Clicks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{companyPeople.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Contacts</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={`text-2xl font-bold ${company.hasResponded ? 'text-green-600' : 'text-gray-400'}`}>\n                {company.hasResponded ? '✓' : '—'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Response</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* People table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Contact List</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Position</TableHead>\n                <TableHead>Attempts</TableHead>\n                <TableHead>Opened</TableHead>\n                <TableHead>Clicked</TableHead>\n                <TableHead>Responded</TableHead>\n                <TableHead>Actions</TableHead>\n                <TableHead></TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {companyPeople.map((person) => (\n                <React.Fragment key={person.id}>\n                  <TableRow className=\"hover:bg-muted/50\">\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"w-4 h-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{person.name}</div>\n                          {person.linkedin && (\n                            <a \n                              href={person.linkedin} \n                              target=\"_blank\" \n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-blue-600 hover:text-blue-800\"\n                            >\n                              LinkedIn\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm\">{person.email}</TableCell>\n                    <TableCell>{person.position}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {person.attempts} / 3\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {person.opened ? (\n                        <Badge variant=\"outline\" className=\"text-green-600\">\n                          ✅ {person.openCount}x\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-gray-500\">❌</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {person.clicked ? (\n                        <Badge variant=\"outline\" className=\"text-blue-600\">\n                          ✅ {person.clickCount}x\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-gray-500\">❌</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {person.responded ? (\n                        <Badge className=\"bg-green-100 text-green-800\">✅ Yes</Badge>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-gray-500\">❌ No</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Button \n                        size=\"sm\" \n                        disabled={!canSendEmail(person)}\n                        title={!canSendEmail(person) ? 'Max attempts reached or already responded' : 'Send next email'}\n                      >\n                        <Mail className=\"w-3 h-3 mr-1\" />\n                        {person.attempts === 0 ? 'Send' : 'Follow Up'}\n                      </Button>\n                    </TableCell>\n                    <TableCell>\n                      <Collapsible>\n                        <CollapsibleTrigger asChild>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => setExpandedPerson(\n                              expandedPerson === person.id ? null : person.id\n                            )}\n                          >\n                            {expandedPerson === person.id ? (\n                              <ChevronDown className=\"w-4 h-4\" />\n                            ) : (\n                              <ChevronRight className=\"w-4 h-4\" />\n                            )}\n                          </Button>\n                        </CollapsibleTrigger>\n                      </Collapsible>\n                    </TableCell>\n                  </TableRow>\n                  \n                  {expandedPerson === person.id && (\n                    <TableRow>\n                      <TableCell colSpan={9} className=\"bg-muted/20\">\n                        <div className=\"py-4\">\n                          <h4 className=\"font-medium mb-3\">Email History for {person.name}</h4>\n                          {getPersonEmailStats(person.id).length > 0 ? (\n                            <div className=\"space-y-2\">\n                              {getPersonEmailStats(person.id).map((stat) => (\n                                <div key={stat.id} className=\"border rounded-lg p-3 bg-background\">\n                                  <div className=\"flex justify-between items-start mb-2\">\n                                    <div className=\"font-medium\">Attempt #{stat.attemptNumber}</div>\n                                    <div className=\"text-sm text-muted-foreground\">{stat.sentDate}</div>\n                                  </div>\n                                  <div className=\"text-sm mb-2\">{stat.subject}</div>\n                                  <div className=\"flex gap-4 text-sm\">\n                                    <span>Opens: {stat.openCount}</span>\n                                    <span>Clicks: {stat.clickCount}</span>\n                                    <span>Responded: {stat.responded ? 'Yes' : 'No'}</span>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">No emails sent yet.</p>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11013},"attached_assets/Dashboard_1754062008916.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { AddCompanyModal } from './AddCompanyModal';\nimport { Mail, Eye, MousePointer, MessageSquare, Plus } from 'lucide-react';\nimport { mockCompanies, mockStats } from './mockData';\n\ninterface DashboardProps {\n  onViewCompany: (companyId: number) => void;\n}\n\nexport function Dashboard({ onViewCompany }: DashboardProps) {\n  const [showAddModal, setShowAddModal] = useState(false);\n\n  const getStatusBadge = (responded: boolean, emailsSent: number) => {\n    if (responded) return <Badge className=\"bg-green-100 text-green-800\">Responded</Badge>;\n    if (emailsSent >= 3) return <Badge variant=\"destructive\">Max Reached</Badge>;\n    return <Badge variant=\"secondary\">In Progress</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Emails Sent</CardTitle>\n            <Mail className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.totalEmails}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +12% from last month\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Opens</CardTitle>\n            <Eye className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.totalOpens}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round((mockStats.totalOpens / mockStats.totalEmails) * 100)}% open rate\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Clicks</CardTitle>\n            <MousePointer className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.totalClicks}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round((mockStats.totalClicks / mockStats.totalEmails) * 100)}% click rate\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Responses</CardTitle>\n            <MessageSquare className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockStats.totalResponses}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round((mockStats.totalResponses / mockStats.totalEmails) * 100)}% response rate\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Company Overview Table */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Company Overview</CardTitle>\n          <Button onClick={() => setShowAddModal(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Company\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Company</TableHead>\n                <TableHead>Emails Sent</TableHead>\n                <TableHead>Last Attempt</TableHead>\n                <TableHead>Opened</TableHead>\n                <TableHead>Clicked</TableHead>\n                <TableHead>Responded</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Action</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {mockCompanies.map((company) => (\n                <TableRow key={company.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{company.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{company.website}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{company.totalEmails} / 3</TableCell>\n                  <TableCell>{company.lastAttempt}</TableCell>\n                  <TableCell>\n                    {company.hasOpened ? (\n                      <Badge variant=\"outline\" className=\"text-green-600\">\n                        ✅ {company.openCount}x\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-gray-500\">❌</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {company.hasClicked ? (\n                      <Badge variant=\"outline\" className=\"text-blue-600\">\n                        ✅ {company.clickCount}x\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-gray-500\">❌</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {company.hasResponded ? (\n                      <Badge variant=\"outline\" className=\"text-green-600\">✅</Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-gray-500\">❌</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {getStatusBadge(company.hasResponded, company.totalEmails)}\n                  </TableCell>\n                  <TableCell>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => onViewCompany(company.id)}\n                    >\n                      View\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <AddCompanyModal \n        isOpen={showAddModal} \n        onClose={() => setShowAddModal(false)} \n      />\n    </div>\n  );\n}","size_bytes":6654},"attached_assets/Guidelines_1754062008916.md":{"content":"","size_bytes":0},"attached_assets/Profile_1754062008916.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Separator } from './ui/separator';\nimport { Switch } from './ui/switch';\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\nimport { ThemeToggle } from './ThemeToggle';\nimport { Badge } from './ui/badge';\nimport { User, Mail, Phone, MapPin, Bell, Shield, Download, Trash2 } from 'lucide-react';\n\nexport function Profile() {\n  const [profile, setProfile] = useState({\n    name: 'Alex Johnson',\n    email: 'alex.johnson@outreachpro.com',\n    phone: '+1 (555) 123-4567',\n    location: 'San Francisco, CA',\n    company: 'OutreachPro',\n    position: 'Senior Recruiter',\n  });\n\n  const [notifications, setNotifications] = useState({\n    emailOpens: true,\n    resumeClicks: true,\n    responses: true,\n    weeklyReport: true,\n    dailyDigest: false,\n  });\n\n  const [privacy, setPrivacy] = useState({\n    trackingPixels: true,\n    analyticsSharing: false,\n    profileVisible: true,\n  });\n\n  const handleProfileUpdate = (field: string, value: string) => {\n    setProfile(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNotificationToggle = (setting: string) => {\n    setNotifications(prev => ({ ...prev, [setting]: !prev[setting as keyof typeof prev] }));\n  };\n\n  const handlePrivacyToggle = (setting: string) => {\n    setPrivacy(prev => ({ ...prev, [setting]: !prev[setting as keyof typeof prev] }));\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-4xl\">\n      {/* Profile Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"w-20 h-20\">\n              <AvatarImage src=\"/placeholder-avatar.jpg\" alt={profile.name} />\n              <AvatarFallback className=\"text-lg\">\n                {profile.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"space-y-1\">\n              <h2 className=\"text-2xl font-semibold\">{profile.name}</h2>\n              <p className=\"text-muted-foreground\">{profile.position} at {profile.company}</p>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Mail className=\"w-3 h-3\" />\n                  {profile.email}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <MapPin className=\"w-3 h-3\" />\n                  {profile.location}\n                </div>\n              </div>\n              <div className=\"flex gap-2 pt-2\">\n                <Badge variant=\"secondary\">Pro Plan</Badge>\n                <Badge variant=\"outline\">Verified</Badge>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Personal Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"w-5 h-5\" />\n              Personal Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  value={profile.name}\n                  onChange={(e) => handleProfileUpdate('name', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"position\">Position</Label>\n                <Input\n                  id=\"position\"\n                  value={profile.position}\n                  onChange={(e) => handleProfileUpdate('position', e.target.value)}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={profile.email}\n                onChange={(e) => handleProfileUpdate('email', e.target.value)}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input\n                  id=\"phone\"\n                  value={profile.phone}\n                  onChange={(e) => handleProfileUpdate('phone', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"company\">Company</Label>\n                <Input\n                  id=\"company\"\n                  value={profile.company}\n                  onChange={(e) => handleProfileUpdate('company', e.target.value)}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                value={profile.location}\n                onChange={(e) => handleProfileUpdate('location', e.target.value)}\n              />\n            </div>\n            \n            <Button className=\"w-full\">Update Profile</Button>\n          </CardContent>\n        </Card>\n\n        {/* Appearance */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Appearance</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Theme</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Choose your preferred color scheme\n                </p>\n              </div>\n              <ThemeToggle />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"w-5 h-5\" />\n              Notifications\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Email Opens</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Get notified when emails are opened\n                </p>\n              </div>\n              <Switch\n                checked={notifications.emailOpens}\n                onCheckedChange={() => handleNotificationToggle('emailOpens')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Resume Clicks</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Get notified when resume links are clicked\n                </p>\n              </div>\n              <Switch\n                checked={notifications.resumeClicks}\n                onCheckedChange={() => handleNotificationToggle('resumeClicks')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Responses</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Get notified when you receive responses\n                </p>\n              </div>\n              <Switch\n                checked={notifications.responses}\n                onCheckedChange={() => handleNotificationToggle('responses')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Weekly Report</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receive weekly performance summary\n                </p>\n              </div>\n              <Switch\n                checked={notifications.weeklyReport}\n                onCheckedChange={() => handleNotificationToggle('weeklyReport')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Daily Digest</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receive daily activity summary\n                </p>\n              </div>\n              <Switch\n                checked={notifications.dailyDigest}\n                onCheckedChange={() => handleNotificationToggle('dailyDigest')}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Privacy & Security */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Privacy & Security\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Email Tracking</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Enable tracking pixels in outbound emails\n                </p>\n              </div>\n              <Switch\n                checked={privacy.trackingPixels}\n                onCheckedChange={() => handlePrivacyToggle('trackingPixels')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Analytics Sharing</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Share anonymized data for product improvement\n                </p>\n              </div>\n              <Switch\n                checked={privacy.analyticsSharing}\n                onCheckedChange={() => handlePrivacyToggle('analyticsSharing')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Profile Visibility</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Make your profile visible to team members\n                </p>\n              </div>\n              <Switch\n                checked={privacy.profileVisible}\n                onCheckedChange={() => handlePrivacyToggle('profileVisible')}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"space-y-2\">\n              <Button variant=\"outline\" className=\"w-full\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Data\n              </Button>\n              <Button variant=\"destructive\" className=\"w-full\">\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete Account\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Account Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Account Statistics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">47</div>\n              <div className=\"text-sm text-muted-foreground\">Total Emails Sent</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">68%</div>\n              <div className=\"text-sm text-muted-foreground\">Average Open Rate</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">23</div>\n              <div className=\"text-sm text-muted-foreground\">Companies Contacted</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">15</div>\n              <div className=\"text-sm text-muted-foreground\">Days Active</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12465},"attached_assets/Stats_1754062008916.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { mockCompanies, mockStats, mockEmailStats } from './mockData';\n\nexport function Stats() {\n  // Calculate stats by company\n  const companyStats = mockCompanies.map(company => ({\n    name: company.name.length > 8 ? company.name.substring(0, 8) + '...' : company.name,\n    fullName: company.name,\n    emails: company.totalEmails,\n    opens: company.openCount,\n    clicks: company.clickCount,\n    openRate: company.totalEmails > 0 ? Math.round((company.openCount / company.totalEmails) * 100) : 0,\n    clickRate: company.totalEmails > 0 ? Math.round((company.clickCount / company.totalEmails) * 100) : 0,\n  }));\n\n  // Response rate data\n  const responseData = [\n    { name: 'Responded', value: mockStats.totalResponses, color: '#22c55e' },\n    { name: 'No Response', value: mockStats.totalEmails - mockStats.totalResponses, color: '#e5e7eb' },\n  ];\n\n  // Email tracking over time (mock data)\n  const timelineData = [\n    { date: 'Jul 20', sent: 8, opened: 5, clicked: 2 },\n    { date: 'Jul 25', sent: 12, opened: 9, clicked: 4 },\n    { date: 'Jul 29', sent: 15, opened: 11, clicked: 6 },\n    { date: 'Aug 1', sent: 12, opened: 7, clicked: 6 },\n  ];\n\n  // Funnel data\n  const funnelData = [\n    { stage: 'Emails Sent', count: mockStats.totalEmails, percentage: 100 },\n    { stage: 'Opened', count: mockStats.totalOpens, percentage: Math.round((mockStats.totalOpens / mockStats.totalEmails) * 100) },\n    { stage: 'Clicked', count: mockStats.totalClicks, percentage: Math.round((mockStats.totalClicks / mockStats.totalEmails) * 100) },\n    { stage: 'Responded', count: mockStats.totalResponses, percentage: Math.round((mockStats.totalResponses / mockStats.totalEmails) * 100) },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Emails</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{mockStats.totalEmails}</div>\n            <div className=\"text-sm text-muted-foreground\">Across all campaigns</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Open Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-blue-600\">\n              {Math.round((mockStats.totalOpens / mockStats.totalEmails) * 100)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{mockStats.totalOpens} opens</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Click Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-600\">\n              {Math.round((mockStats.totalClicks / mockStats.totalEmails) * 100)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{mockStats.totalClicks} clicks</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Response Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-purple-600\">\n              {Math.round((mockStats.totalResponses / mockStats.totalEmails) * 100)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{mockStats.totalResponses} responses</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row 1 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Performance by Company</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={companyStats}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip \n                  formatter={(value, name, props) => [\n                    value, \n                    name.charAt(0).toUpperCase() + name.slice(1)\n                  ]}\n                  labelFormatter={(label) => {\n                    const company = companyStats.find(c => c.name === label);\n                    return company?.fullName || label;\n                  }}\n                />\n                <Bar dataKey=\"opens\" fill=\"#3b82f6\" name=\"opens\" />\n                <Bar dataKey=\"clicks\" fill=\"#10b981\" name=\"clicks\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Response Rate Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={responseData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                >\n                  {responseData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row 2 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Email Activity Timeline</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={timelineData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"sent\" stroke=\"#8884d8\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"opened\" stroke=\"#82ca9d\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"clicked\" stroke=\"#ffc658\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Conversion Funnel</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {funnelData.map((item, index) => (\n                <div key={item.stage} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                    <span className=\"font-medium\">{item.stage}</span>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-right\">\n                      <div className=\"font-bold\">{item.count}</div>\n                      <div className=\"text-sm text-muted-foreground\">{item.percentage}%</div>\n                    </div>\n                    <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-500 h-2 rounded-full transition-all\"\n                        style={{ width: `${item.percentage}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Company Performance Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Company Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-2\">Company</th>\n                  <th className=\"text-center py-2\">Emails</th>\n                  <th className=\"text-center py-2\">Opens</th>\n                  <th className=\"text-center py-2\">Open Rate</th>\n                  <th className=\"text-center py-2\">Clicks</th>\n                  <th className=\"text-center py-2\">Click Rate</th>\n                  <th className=\"text-center py-2\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {companyStats.map((company, index) => (\n                  <tr key={index} className=\"border-b hover:bg-muted/50\">\n                    <td className=\"py-3 font-medium\">{company.fullName}</td>\n                    <td className=\"text-center py-3\">{company.emails}</td>\n                    <td className=\"text-center py-3\">{company.opens}</td>\n                    <td className=\"text-center py-3\">\n                      <Badge variant={company.openRate >= 60 ? \"default\" : \"secondary\"}>\n                        {company.openRate}%\n                      </Badge>\n                    </td>\n                    <td className=\"text-center py-3\">{company.clicks}</td>\n                    <td className=\"text-center py-3\">\n                      <Badge variant={company.clickRate >= 30 ? \"default\" : \"secondary\"}>\n                        {company.clickRate}%\n                      </Badge>\n                    </td>\n                    <td className=\"text-center py-3\">\n                      <Badge variant={company.opens > 0 ? \"default\" : \"secondary\"}>\n                        {company.opens > 0 ? \"Active\" : \"No Activity\"}\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10292},"attached_assets/ThemeProvider_1754062008916.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeProviderContextProps {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  actualTheme: 'dark' | 'light';\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderContextProps | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'outreach-pro-theme',\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  const [actualTheme, setActualTheme] = useState<'dark' | 'light'>('light');\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    const updateActualTheme = () => {\n      let resolvedTheme: 'dark' | 'light';\n      \n      if (theme === 'system') {\n        resolvedTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      } else {\n        resolvedTheme = theme;\n      }\n      \n      setActualTheme(resolvedTheme);\n      \n      root.classList.remove('light', 'dark');\n      root.classList.add(resolvedTheme);\n    };\n\n    updateActualTheme();\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        updateActualTheme();\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    actualTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n\n  return context;\n};","size_bytes":2258},"attached_assets/ThemeToggle_1754062008916.tsx":{"content":"import React from 'react';\nimport { Moon, Sun, Monitor } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { useTheme } from './ThemeProvider';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Select value={theme} onValueChange={setTheme}>\n      <SelectTrigger className=\"w-40\">\n        <SelectValue placeholder=\"Select theme\">\n          <div className=\"flex items-center gap-2\">\n            {theme === 'light' && <Sun className=\"w-4 h-4\" />}\n            {theme === 'dark' && <Moon className=\"w-4 h-4\" />}\n            {theme === 'system' && <Monitor className=\"w-4 h-4\" />}\n            <span className=\"capitalize\">{theme}</span>\n          </div>\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent>\n        <SelectItem value=\"light\">\n          <div className=\"flex items-center gap-2\">\n            <Sun className=\"w-4 h-4\" />\n            Light\n          </div>\n        </SelectItem>\n        <SelectItem value=\"dark\">\n          <div className=\"flex items-center gap-2\">\n            <Moon className=\"w-4 h-4\" />\n            Dark\n          </div>\n        </SelectItem>\n        <SelectItem value=\"system\">\n          <div className=\"flex items-center gap-2\">\n            <Monitor className=\"w-4 h-4\" />\n            System\n          </div>\n        </SelectItem>\n      </SelectContent>\n    </Select>\n  );\n}\n\nexport function QuickThemeToggle() {\n  const { actualTheme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(actualTheme === 'light' ? 'dark' : 'light')}\n      className=\"w-9 h-9\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":2000},"attached_assets/globals_1754062008916.css":{"content":"@custom-variant dark (&:is(.dark *));\n\n:root {\n  --font-size: 14px;\n  --background: #ffffff;\n  --foreground: oklch(0.145 0 0);\n  --card: #ffffff;\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: #030213;\n  --primary-foreground: oklch(1 0 0);\n  --secondary: oklch(0.95 0.0058 264.53);\n  --secondary-foreground: #030213;\n  --muted: #ececf0;\n  --muted-foreground: #717182;\n  --accent: #e9ebef;\n  --accent-foreground: #030213;\n  --destructive: #d4183d;\n  --destructive-foreground: #ffffff;\n  --border: rgba(0, 0, 0, 0.1);\n  --input: transparent;\n  --input-background: #f3f3f5;\n  --switch-background: #cbced4;\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: #030213;\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.181 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.181 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.496 0.191 25.723);\n  --destructive-foreground: oklch(0.985 0 0);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --input-background: oklch(0.22 0 0);\n  --switch-background: oklch(0.35 0 0);\n  --ring: oklch(0.439 0 0);\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --chart-1: oklch(0.588 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.181 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.588 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.22 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-input-background: var(--input-background);\n  --color-switch-background: var(--switch-background);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 200ms;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    transition: background-color 300ms ease-in-out, color 300ms ease-in-out;\n  }\n\n  html {\n    transition: color-scheme 300ms ease-in-out;\n  }\n\n  html.dark {\n    color-scheme: dark;\n  }\n\n  html.light {\n    color-scheme: light;\n  }\n}\n\n/**\n * Base typography. This is not applied to elements which have an ancestor with a Tailwind text class.\n */\n@layer base {\n  :where(:not(:has([class*=\" text-\"]), :not(:has([class^=\"text-\"])))) {\n    h1 {\n      font-size: var(--text-2xl);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h2 {\n      font-size: var(--text-xl);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h3 {\n      font-size: var(--text-lg);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h4 {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    p {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: 1.5;\n    }\n\n    label {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    button {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    input {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: 1.5;\n    }\n  }\n}\n\nhtml {\n  font-size: var(--font-size);\n}\n\n/* Smooth animations for theme switching */\n@layer base {\n  .recharts-cartesian-grid line,\n  .recharts-reference-line line {\n    transition: stroke 300ms ease-in-out;\n  }\n  \n  .recharts-tooltip-wrapper {\n    transition: all 300ms ease-in-out;\n  }\n}\n\n/* Enhanced scrollbar styling for dark mode */\n@layer base {\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--muted);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--muted-foreground);\n    border-radius: 4px;\n    opacity: 0.5;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    opacity: 0.8;\n  }\n}","size_bytes":6761},"attached_assets/mockData_1754062008916.ts":{"content":"export interface Company {\n  id: number;\n  name: string;\n  website: string;\n  linkedin: string;\n  totalEmails: number;\n  lastAttempt: string;\n  hasOpened: boolean;\n  openCount: number;\n  hasClicked: boolean;\n  clickCount: number;\n  hasResponded: boolean;\n}\n\nexport interface Person {\n  id: number;\n  companyId: number;\n  name: string;\n  email: string;\n  position: string;\n  linkedin: string;\n  attempts: number;\n  lastEmailDate: string;\n  opened: boolean;\n  openCount: number;\n  clicked: boolean;\n  clickCount: number;\n  responded: boolean;\n}\n\nexport interface EmailStat {\n  id: number;\n  personId: number;\n  attemptNumber: number;\n  sentDate: string;\n  openCount: number;\n  clickCount: number;\n  responded: boolean;\n  subject: string;\n}\n\nexport const mockCompanies: Company[] = [\n  {\n    id: 1,\n    name: 'OpenAI',\n    website: 'openai.com',\n    linkedin: 'https://linkedin.com/company/openai',\n    totalEmails: 2,\n    lastAttempt: 'Jul 31',\n    hasOpened: true,\n    openCount: 3,\n    hasClicked: true,\n    clickCount: 1,\n    hasResponded: false,\n  },\n  {\n    id: 2,\n    name: 'Anthropic',\n    website: 'anthropic.com',\n    linkedin: 'https://linkedin.com/company/anthropic',\n    totalEmails: 1,\n    lastAttempt: 'Jul 29',\n    hasOpened: true,\n    openCount: 1,\n    hasClicked: false,\n    clickCount: 0,\n    hasResponded: false,\n  },\n  {\n    id: 3,\n    name: 'Stripe',\n    website: 'stripe.com',\n    linkedin: 'https://linkedin.com/company/stripe',\n    totalEmails: 3,\n    lastAttempt: 'Jul 25',\n    hasOpened: true,\n    openCount: 2,\n    hasClicked: true,\n    clickCount: 2,\n    hasResponded: true,\n  },\n  {\n    id: 4,\n    name: 'Figma',\n    website: 'figma.com',\n    linkedin: 'https://linkedin.com/company/figma',\n    totalEmails: 1,\n    lastAttempt: 'Aug 1',\n    hasOpened: false,\n    openCount: 0,\n    hasClicked: false,\n    clickCount: 0,\n    hasResponded: false,\n  },\n];\n\nexport const mockPeople: Person[] = [\n  {\n    id: 1,\n    companyId: 1,\n    name: 'Alice Smith',\n    email: 'alice@openai.com',\n    position: 'Senior Engineering Manager',\n    linkedin: 'https://linkedin.com/in/alice-smith',\n    attempts: 2,\n    lastEmailDate: '2024-07-31',\n    opened: true,\n    openCount: 3,\n    clicked: true,\n    clickCount: 1,\n    responded: false,\n  },\n  {\n    id: 2,\n    companyId: 1,\n    name: 'Bob Johnson',\n    email: 'bob@openai.com',\n    position: 'Technical Recruiter',\n    linkedin: 'https://linkedin.com/in/bob-johnson',\n    attempts: 0,\n    lastEmailDate: '',\n    opened: false,\n    openCount: 0,\n    clicked: false,\n    clickCount: 0,\n    responded: false,\n  },\n  {\n    id: 3,\n    companyId: 2,\n    name: 'Carol Davis',\n    email: 'carol@anthropic.com',\n    position: 'Head of Engineering',\n    linkedin: 'https://linkedin.com/in/carol-davis',\n    attempts: 1,\n    lastEmailDate: '2024-07-29',\n    opened: true,\n    openCount: 1,\n    clicked: false,\n    clickCount: 0,\n    responded: false,\n  },\n  {\n    id: 4,\n    companyId: 3,\n    name: 'David Wilson',\n    email: 'david@stripe.com',\n    position: 'Software Engineer',\n    linkedin: 'https://linkedin.com/in/david-wilson',\n    attempts: 3,\n    lastEmailDate: '2024-07-25',\n    opened: true,\n    openCount: 2,\n    clicked: true,\n    clickCount: 2,\n    responded: true,\n  },\n  {\n    id: 5,\n    companyId: 4,\n    name: 'Eve Brown',\n    email: 'eve@figma.com',\n    position: 'Design Engineer',\n    linkedin: 'https://linkedin.com/in/eve-brown',\n    attempts: 1,\n    lastEmailDate: '2024-08-01',\n    opened: false,\n    openCount: 0,\n    clicked: false,\n    clickCount: 0,\n    responded: false,\n  },\n];\n\nexport const mockEmailStats: EmailStat[] = [\n  {\n    id: 1,\n    personId: 1,\n    attemptNumber: 1,\n    sentDate: '2024-07-28',\n    openCount: 2,\n    clickCount: 1,\n    responded: false,\n    subject: 'Software Engineer Position - Let\\'s Connect',\n  },\n  {\n    id: 2,\n    personId: 1,\n    attemptNumber: 2,\n    sentDate: '2024-07-31',\n    openCount: 1,\n    clickCount: 0,\n    responded: false,\n    subject: 'Following Up - Software Engineer Role',\n  },\n  {\n    id: 3,\n    personId: 3,\n    attemptNumber: 1,\n    sentDate: '2024-07-29',\n    openCount: 1,\n    clickCount: 0,\n    responded: false,\n    subject: 'Exploring Opportunities at Anthropic',\n  },\n  {\n    id: 4,\n    personId: 4,\n    attemptNumber: 1,\n    sentDate: '2024-07-20',\n    openCount: 1,\n    clickCount: 1,\n    responded: false,\n    subject: 'Software Engineer - Stripe',\n  },\n  {\n    id: 5,\n    personId: 4,\n    attemptNumber: 2,\n    sentDate: '2024-07-23',\n    openCount: 1,\n    clickCount: 1,\n    responded: false,\n    subject: 'Re: Software Engineer - Stripe',\n  },\n  {\n    id: 6,\n    personId: 4,\n    attemptNumber: 3,\n    sentDate: '2024-07-25',\n    openCount: 0,\n    clickCount: 0,\n    responded: true,\n    subject: 'Final Follow-up - Stripe Opportunity',\n  },\n];\n\nexport const mockStats = {\n  totalEmails: 47,\n  totalOpens: 32,\n  totalClicks: 18,\n  totalResponses: 5,\n};","size_bytes":4903},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCompanySchema, insertPersonSchema, insertEmailStatSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Companies routes\n  app.get(\"/api/companies\", async (req, res) => {\n    try {\n      const companies = await storage.getCompanies();\n      res.json(companies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.get(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const company = await storage.getCompany(req.params.id);\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  app.post(\"/api/companies\", async (req, res) => {\n    try {\n      const validatedData = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany(validatedData);\n      res.status(201).json(company);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  app.patch(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const updates = insertCompanySchema.partial().parse(req.body);\n      const company = await storage.updateCompany(req.params.id, updates);\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCompany(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // People routes\n  app.get(\"/api/people\", async (req, res) => {\n    try {\n      const { companyId } = req.query;\n      let people;\n      \n      if (companyId) {\n        people = await storage.getPeopleByCompany(companyId as string);\n      } else {\n        people = await storage.getPeople();\n      }\n      \n      res.json(people);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch people\" });\n    }\n  });\n\n  app.get(\"/api/people/:id\", async (req, res) => {\n    try {\n      const person = await storage.getPerson(req.params.id);\n      if (!person) {\n        return res.status(404).json({ message: \"Person not found\" });\n      }\n      res.json(person);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch person\" });\n    }\n  });\n\n  app.post(\"/api/people\", async (req, res) => {\n    try {\n      const validatedData = insertPersonSchema.parse(req.body);\n      const person = await storage.createPerson(validatedData);\n      res.status(201).json(person);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid person data\" });\n    }\n  });\n\n  app.patch(\"/api/people/:id\", async (req, res) => {\n    try {\n      const updates = insertPersonSchema.partial().parse(req.body);\n      const person = await storage.updatePerson(req.params.id, updates);\n      if (!person) {\n        return res.status(404).json({ message: \"Person not found\" });\n      }\n      res.json(person);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/people/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePerson(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Person not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete person\" });\n    }\n  });\n\n  // Email stats routes\n  app.get(\"/api/email-stats\", async (req, res) => {\n    try {\n      const { personId } = req.query;\n      let emailStats;\n      \n      if (personId) {\n        emailStats = await storage.getEmailStatsByPerson(personId as string);\n      } else {\n        emailStats = await storage.getEmailStats();\n      }\n      \n      res.json(emailStats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch email stats\" });\n    }\n  });\n\n  app.post(\"/api/email-stats\", async (req, res) => {\n    try {\n      const validatedData = insertEmailStatSchema.parse(req.body);\n      const emailStat = await storage.createEmailStat(validatedData);\n      res.status(201).json(emailStat);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid email stat data\" });\n    }\n  });\n\n  // Stats endpoint for dashboard\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const companies = await storage.getCompanies();\n      const people = await storage.getPeople();\n      const emailStats = await storage.getEmailStats();\n\n      const totalEmails = companies.reduce((sum, company) => sum + company.totalEmails, 0);\n      const totalOpens = companies.reduce((sum, company) => sum + company.openCount, 0);\n      const totalClicks = companies.reduce((sum, company) => sum + company.clickCount, 0);\n      const totalResponses = companies.filter(company => company.hasResponded).length;\n\n      res.json({\n        totalEmails,\n        totalOpens,\n        totalClicks,\n        totalResponses,\n        companies,\n        people,\n        emailStats,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5695},"server/storage.ts":{"content":"import { type Company, type InsertCompany, type Person, type InsertPerson, type EmailStat, type InsertEmailStat } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Companies\n  getCompanies(): Promise<Company[]>;\n  getCompany(id: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company | undefined>;\n  deleteCompany(id: string): Promise<boolean>;\n\n  // People\n  getPeople(): Promise<Person[]>;\n  getPeopleByCompany(companyId: string): Promise<Person[]>;\n  getPerson(id: string): Promise<Person | undefined>;\n  createPerson(person: InsertPerson): Promise<Person>;\n  updatePerson(id: string, person: Partial<InsertPerson>): Promise<Person | undefined>;\n  deletePerson(id: string): Promise<boolean>;\n\n  // Email Stats\n  getEmailStats(): Promise<EmailStat[]>;\n  getEmailStatsByPerson(personId: string): Promise<EmailStat[]>;\n  createEmailStat(emailStat: InsertEmailStat): Promise<EmailStat>;\n}\n\nexport class MemStorage implements IStorage {\n  private companies: Map<string, Company>;\n  private people: Map<string, Person>;\n  private emailStats: Map<string, EmailStat>;\n\n  constructor() {\n    this.companies = new Map();\n    this.people = new Map();\n    this.emailStats = new Map();\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed companies\n    const mockCompanies = [\n      {\n        id: \"1\",\n        name: \"OpenAI\",\n        website: \"openai.com\",\n        linkedin: \"https://linkedin.com/company/openai\",\n        totalEmails: 2,\n        lastAttempt: \"Jul 31\",\n        hasOpened: true,\n        openCount: 3,\n        hasClicked: true,\n        clickCount: 1,\n        hasResponded: false,\n      },\n      {\n        id: \"2\",\n        name: \"Anthropic\",\n        website: \"anthropic.com\",\n        linkedin: \"https://linkedin.com/company/anthropic\",\n        totalEmails: 1,\n        lastAttempt: \"Jul 29\",\n        hasOpened: true,\n        openCount: 1,\n        hasClicked: false,\n        clickCount: 0,\n        hasResponded: false,\n      },\n      {\n        id: \"3\",\n        name: \"Stripe\",\n        website: \"stripe.com\",\n        linkedin: \"https://linkedin.com/company/stripe\",\n        totalEmails: 3,\n        lastAttempt: \"Jul 25\",\n        hasOpened: true,\n        openCount: 2,\n        hasClicked: true,\n        clickCount: 2,\n        hasResponded: true,\n      },\n      {\n        id: \"4\",\n        name: \"Figma\",\n        website: \"figma.com\",\n        linkedin: \"https://linkedin.com/company/figma\",\n        totalEmails: 1,\n        lastAttempt: \"Aug 1\",\n        hasOpened: false,\n        openCount: 0,\n        hasClicked: false,\n        clickCount: 0,\n        hasResponded: false,\n      },\n    ];\n\n    mockCompanies.forEach(company => this.companies.set(company.id, company));\n\n    // Seed people\n    const mockPeople = [\n      {\n        id: \"1\",\n        companyId: \"1\",\n        name: \"Alice Smith\",\n        email: \"alice@openai.com\",\n        position: \"Senior Engineering Manager\",\n        linkedin: \"https://linkedin.com/in/alice-smith\",\n        attempts: 2,\n        lastEmailDate: \"2024-07-31\",\n        opened: true,\n        openCount: 3,\n        clicked: true,\n        clickCount: 1,\n        responded: false,\n      },\n      {\n        id: \"2\",\n        companyId: \"1\",\n        name: \"Bob Johnson\",\n        email: \"bob@openai.com\",\n        position: \"Technical Recruiter\",\n        linkedin: \"https://linkedin.com/in/bob-johnson\",\n        attempts: 0,\n        lastEmailDate: \"\",\n        opened: false,\n        openCount: 0,\n        clicked: false,\n        clickCount: 0,\n        responded: false,\n      },\n      {\n        id: \"3\",\n        companyId: \"2\",\n        name: \"Carol Davis\",\n        email: \"carol@anthropic.com\",\n        position: \"Head of Engineering\",\n        linkedin: \"https://linkedin.com/in/carol-davis\",\n        attempts: 1,\n        lastEmailDate: \"2024-07-29\",\n        opened: true,\n        openCount: 1,\n        clicked: false,\n        clickCount: 0,\n        responded: false,\n      },\n      {\n        id: \"4\",\n        companyId: \"3\",\n        name: \"David Wilson\",\n        email: \"david@stripe.com\",\n        position: \"Software Engineer\",\n        linkedin: \"https://linkedin.com/in/david-wilson\",\n        attempts: 3,\n        lastEmailDate: \"2024-07-25\",\n        opened: true,\n        openCount: 2,\n        clicked: true,\n        clickCount: 2,\n        responded: true,\n      },\n      {\n        id: \"5\",\n        companyId: \"4\",\n        name: \"Eve Brown\",\n        email: \"eve@figma.com\",\n        position: \"Design Engineer\",\n        linkedin: \"https://linkedin.com/in/eve-brown\",\n        attempts: 1,\n        lastEmailDate: \"2024-08-01\",\n        opened: false,\n        openCount: 0,\n        clicked: false,\n        clickCount: 0,\n        responded: false,\n      },\n    ];\n\n    mockPeople.forEach(person => this.people.set(person.id, person));\n\n    // Seed email stats\n    const mockEmailStats = [\n      {\n        id: \"1\",\n        personId: \"1\",\n        attemptNumber: 1,\n        sentDate: \"2024-07-28\",\n        openCount: 2,\n        clickCount: 1,\n        responded: false,\n        subject: \"Software Engineer Position - Let's Connect\",\n      },\n      {\n        id: \"2\",\n        personId: \"1\",\n        attemptNumber: 2,\n        sentDate: \"2024-07-31\",\n        openCount: 1,\n        clickCount: 0,\n        responded: false,\n        subject: \"Following Up - Software Engineer Role\",\n      },\n      {\n        id: \"3\",\n        personId: \"3\",\n        attemptNumber: 1,\n        sentDate: \"2024-07-29\",\n        openCount: 1,\n        clickCount: 0,\n        responded: false,\n        subject: \"Exploring Opportunities at Anthropic\",\n      },\n    ];\n\n    mockEmailStats.forEach(emailStat => this.emailStats.set(emailStat.id, emailStat));\n  }\n\n  // Companies\n  async getCompanies(): Promise<Company[]> {\n    return Array.from(this.companies.values());\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    return this.companies.get(id);\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const id = randomUUID();\n    const company: Company = { ...insertCompany, id };\n    this.companies.set(id, company);\n    return company;\n  }\n\n  async updateCompany(id: string, updates: Partial<InsertCompany>): Promise<Company | undefined> {\n    const company = this.companies.get(id);\n    if (!company) return undefined;\n    \n    const updated = { ...company, ...updates };\n    this.companies.set(id, updated);\n    return updated;\n  }\n\n  async deleteCompany(id: string): Promise<boolean> {\n    return this.companies.delete(id);\n  }\n\n  // People\n  async getPeople(): Promise<Person[]> {\n    return Array.from(this.people.values());\n  }\n\n  async getPeopleByCompany(companyId: string): Promise<Person[]> {\n    return Array.from(this.people.values()).filter(person => person.companyId === companyId);\n  }\n\n  async getPerson(id: string): Promise<Person | undefined> {\n    return this.people.get(id);\n  }\n\n  async createPerson(insertPerson: InsertPerson): Promise<Person> {\n    const id = randomUUID();\n    const person: Person = { ...insertPerson, id };\n    this.people.set(id, person);\n    return person;\n  }\n\n  async updatePerson(id: string, updates: Partial<InsertPerson>): Promise<Person | undefined> {\n    const person = this.people.get(id);\n    if (!person) return undefined;\n    \n    const updated = { ...person, ...updates };\n    this.people.set(id, updated);\n    return updated;\n  }\n\n  async deletePerson(id: string): Promise<boolean> {\n    return this.people.delete(id);\n  }\n\n  // Email Stats\n  async getEmailStats(): Promise<EmailStat[]> {\n    return Array.from(this.emailStats.values());\n  }\n\n  async getEmailStatsByPerson(personId: string): Promise<EmailStat[]> {\n    return Array.from(this.emailStats.values()).filter(stat => stat.personId === personId);\n  }\n\n  async createEmailStat(insertEmailStat: InsertEmailStat): Promise<EmailStat> {\n    const id = randomUUID();\n    const emailStat: EmailStat = { ...insertEmailStat, id };\n    this.emailStats.set(id, emailStat);\n    return emailStat;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8153},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  website: text(\"website\").notNull(),\n  linkedin: text(\"linkedin\"),\n  totalEmails: integer(\"total_emails\").notNull().default(0),\n  lastAttempt: text(\"last_attempt\"),\n  hasOpened: boolean(\"has_opened\").notNull().default(false),\n  openCount: integer(\"open_count\").notNull().default(0),\n  hasClicked: boolean(\"has_clicked\").notNull().default(false),\n  clickCount: integer(\"click_count\").notNull().default(0),\n  hasResponded: boolean(\"has_responded\").notNull().default(false),\n});\n\nexport const people = pgTable(\"people\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  position: text(\"position\"),\n  linkedin: text(\"linkedin\"),\n  attempts: integer(\"attempts\").notNull().default(0),\n  lastEmailDate: text(\"last_email_date\"),\n  opened: boolean(\"opened\").notNull().default(false),\n  openCount: integer(\"open_count\").notNull().default(0),\n  clicked: boolean(\"clicked\").notNull().default(false),\n  clickCount: integer(\"click_count\").notNull().default(0),\n  responded: boolean(\"responded\").notNull().default(false),\n});\n\nexport const emailStats = pgTable(\"email_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personId: varchar(\"person_id\").notNull(),\n  attemptNumber: integer(\"attempt_number\").notNull(),\n  sentDate: text(\"sent_date\").notNull(),\n  openCount: integer(\"open_count\").notNull().default(0),\n  clickCount: integer(\"click_count\").notNull().default(0),\n  responded: boolean(\"responded\").notNull().default(false),\n  subject: text(\"subject\").notNull(),\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n});\n\nexport const insertPersonSchema = createInsertSchema(people).omit({\n  id: true,\n});\n\nexport const insertEmailStatSchema = createInsertSchema(emailStats).omit({\n  id: true,\n});\n\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertPerson = z.infer<typeof insertPersonSchema>;\nexport type Person = typeof people.$inferSelect;\nexport type InsertEmailStat = z.infer<typeof insertEmailStatSchema>;\nexport type EmailStat = typeof emailStats.$inferSelect;\n","size_bytes":2589},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Companies from \"@/pages/Companies\";\nimport Analytics from \"@/pages/Analytics\";\nimport Profile from \"@/pages/Profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/companies\" component={Companies} />\n        <Route path=\"/analytics\" component={Analytics} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"outreach-pro-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1252},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(222.2, 47.4%, 11.2%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(222.2, 84%, 4.9%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 40%, 98%);\n  --primary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(212.7, 26.8%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Smooth theme transitions */\n  .theme-transition,\n  .theme-transition *,\n  .theme-transition *:before,\n  .theme-transition *:after {\n    transition: background-color 100ms ease-out, \n                color 100ms ease-out, \n                border-color 100ms ease-out,\n                box-shadow 100ms ease-out !important;\n  }\n\n  html {\n    transition: color-scheme 100ms ease-out;\n  }\n\n  html.dark {\n    color-scheme: dark;\n  }\n\n  /* Force perfect centering for collapsed sidebar buttons */\n  .sidebar-collapsed-button {\n    padding: 0 !important;\n    display: flex !important;\n    align-items: center !important;\n    justify-content: center !important;\n  }\n\n  /* Force spacing for expanded sidebar buttons */\n  .sidebar-expanded .space-y-4 > * + * {\n    margin-top: 1rem !important;\n  }\n\n  html.light {\n    color-scheme: light;\n  }\n}\n\n/* Enhanced Sidebar Animation System */\n.sidebar-collapsed {\n  width: 4rem;\n  transition: width 600ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.sidebar-expanded {\n  width: 16rem;\n  transition: width 600ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n/* Smooth content animations */\n.sidebar-content-transition {\n  transition: all 500ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.sidebar-text-fade {\n  transition: opacity 400ms cubic-bezier(0.23, 1, 0.32, 1), \n              transform 400ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.sidebar-text-fade-out {\n  opacity: 0;\n  transform: translateX(-10px);\n}\n\n.sidebar-text-fade-in {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n.sidebar-icon-transition {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.sidebar-logo-morph {\n  transition: all 650ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.sidebar-button-morph {\n  transition: all 550ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n/* Override any global transition that might interfere */\n.sidebar-content-transition * {\n  transition: inherit !important;\n}\n\n/* Remove the problematic global 200ms animation */\n.sidebar-expanded *,\n.sidebar-collapsed * {\n  transition: none !important;\n}\n\n.sidebar-expanded .sidebar-content-transition,\n.sidebar-collapsed .sidebar-content-transition,\n.sidebar-expanded .sidebar-text-fade,\n.sidebar-collapsed .sidebar-text-fade,\n.sidebar-expanded .sidebar-icon-transition,\n.sidebar-collapsed .sidebar-icon-transition,\n.sidebar-expanded .sidebar-logo-morph,\n.sidebar-collapsed .sidebar-logo-morph,\n.sidebar-expanded .sidebar-button-morph,\n.sidebar-collapsed .sidebar-button-morph {\n  transition: inherit !important;\n}\n\n@media (max-width: 768px) {\n  .sidebar-expanded, .sidebar-collapsed {\n    width: 100%;\n    position: fixed;\n    z-index: 50;\n    height: 100vh;\n  }\n}\n\n/* Smooth animations for theme switching */\n@layer base {\n  .recharts-cartesian-grid line,\n  .recharts-reference-line line {\n    transition: stroke 300ms ease-in-out;\n  }\n  \n  .recharts-tooltip-wrapper {\n    transition: all 300ms ease-in-out;\n  }\n}\n\n/* Enhanced scrollbar styling for dark mode */\n@layer base {\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--muted);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--muted-foreground);\n    border-radius: 4px;\n    opacity: 0.5;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    opacity: 0.8;\n  }\n}\n","size_bytes":4983},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AddCompanyModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"./ui/dialog\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Trash2, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Person {\n  name: string;\n  email: string;\n  position: string;\n  linkedin: string;\n}\n\ninterface AddCompanyModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddCompanyModal({ open, onOpenChange }: AddCompanyModalProps) {\n  const [companyName, setCompanyName] = useState(\"\");\n  const [website, setWebsite] = useState(\"\");\n  const [linkedinUrl, setLinkedinUrl] = useState(\"\");\n  const [people, setPeople] = useState<Person[]>([\n    { name: \"\", email: \"\", position: \"\", linkedin: \"\" }\n  ]);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createCompanyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/companies\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company created successfully\",\n      });\n      handleClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to create company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPersonMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/people\", data);\n      return response.json();\n    },\n  });\n\n  const addPerson = () => {\n    if (people.length < 3) {\n      setPeople([...people, { name: \"\", email: \"\", position: \"\", linkedin: \"\" }]);\n    }\n  };\n\n  const removePerson = (index: number) => {\n    if (people.length > 1) {\n      setPeople(people.filter((_, i) => i !== index));\n    }\n  };\n\n  const updatePerson = (index: number, field: keyof Person, value: string) => {\n    const updated = [...people];\n    updated[index][field] = value;\n    setPeople(updated);\n  };\n\n  const handleSubmit = async () => {\n    if (!companyName || !website) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Company name and website are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate that at least one person has name and email\n    const validPeople = people.filter(person => person.name && person.email);\n    if (validPeople.length === 0) {\n      toast({\n        title: \"Validation Error\", \n        description: \"At least one contact with name and email is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Create company first\n      const company = await createCompanyMutation.mutateAsync({\n        name: companyName,\n        website,\n        linkedin: linkedinUrl,\n        totalEmails: 0,\n        lastAttempt: null,\n        hasOpened: false,\n        openCount: 0,\n        hasClicked: false,\n        clickCount: 0,\n        hasResponded: false,\n      });\n\n      // Create people for the company\n      for (const person of validPeople) {\n        await createPersonMutation.mutateAsync({\n          companyId: company.id,\n          name: person.name,\n          email: person.email,\n          position: person.position,\n          linkedin: person.linkedin,\n          attempts: 0,\n          lastEmailDate: null,\n          opened: false,\n          openCount: 0,\n          clicked: false,\n          clickCount: 0,\n          responded: false,\n        });\n      }\n    } catch (error) {\n      // Error handling is done in mutation onError\n    }\n  };\n\n  const handleClose = () => {\n    setCompanyName(\"\");\n    setWebsite(\"\");\n    setLinkedinUrl(\"\");\n    setPeople([{ name: \"\", email: \"\", position: \"\", linkedin: \"\" }]);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-modal-title\">Add New Company</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Company Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Company Information</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"company-name\">Company Name *</Label>\n                <Input\n                  id=\"company-name\"\n                  value={companyName}\n                  onChange={(e) => setCompanyName(e.target.value)}\n                  placeholder=\"e.g., Acme Corp\"\n                  data-testid=\"input-company-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"website\">Website *</Label>\n                <Input\n                  id=\"website\"\n                  value={website}\n                  onChange={(e) => setWebsite(e.target.value)}\n                  placeholder=\"e.g., acme.com\"\n                  data-testid=\"input-website\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"linkedin\">LinkedIn URL</Label>\n              <Input\n                id=\"linkedin\"\n                value={linkedinUrl}\n                onChange={(e) => setLinkedinUrl(e.target.value)}\n                placeholder=\"https://linkedin.com/company/acme\"\n                data-testid=\"input-linkedin\"\n              />\n            </div>\n          </div>\n\n          {/* People */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Contacts</h3>\n              {people.length < 3 && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addPerson}\n                  data-testid=\"button-add-person\"\n                >\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add Person\n                </Button>\n              )}\n            </div>\n\n            {people.map((person, index) => (\n              <div key={index} className=\"border border-border rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Contact {index + 1}</h4>\n                  {people.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removePerson(index)}\n                      className=\"text-destructive hover:bg-destructive/10\"\n                      data-testid={`button-remove-person-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor={`name-${index}`}>Full Name *</Label>\n                    <Input\n                      id={`name-${index}`}\n                      value={person.name}\n                      onChange={(e) => updatePerson(index, \"name\", e.target.value)}\n                      placeholder=\"John Doe\"\n                      data-testid={`input-person-name-${index}`}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor={`position-${index}`}>Position</Label>\n                    <Input\n                      id={`position-${index}`}\n                      value={person.position}\n                      onChange={(e) => updatePerson(index, \"position\", e.target.value)}\n                      placeholder=\"Software Engineer\"\n                      data-testid={`input-person-position-${index}`}\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor={`email-${index}`}>Email *</Label>\n                    <Input\n                      id={`email-${index}`}\n                      type=\"email\"\n                      value={person.email}\n                      onChange={(e) => updatePerson(index, \"email\", e.target.value)}\n                      placeholder=\"john@acme.com\"\n                      data-testid={`input-person-email-${index}`}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor={`person-linkedin-${index}`}>LinkedIn</Label>\n                    <Input\n                      id={`person-linkedin-${index}`}\n                      value={person.linkedin}\n                      onChange={(e) => updatePerson(index, \"linkedin\", e.target.value)}\n                      placeholder=\"https://linkedin.com/in/johndoe\"\n                      data-testid={`input-person-linkedin-${index}`}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSubmit} \n            disabled={createCompanyMutation.isPending}\n            data-testid=\"button-submit\"\n          >\n            {createCompanyMutation.isPending ? \"Creating...\" : \"Add Company\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9854},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport { useLocation } from \"wouter\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nconst pageInfo = {\n  \"/\": {\n    title: \"Dashboard\",\n    description: \"Track your outreach campaigns and performance\"\n  },\n  \"/companies\": {\n    title: \"Companies\",\n    description: \"Manage your target companies and contacts\"\n  },\n  \"/analytics\": {\n    title: \"Analytics\",\n    description: \"View detailed performance analytics and insights\"\n  },\n  \"/profile\": {\n    title: \"Profile\",\n    description: \"Manage your account settings and preferences\"\n  }\n};\n\nexport default function Layout({ children }: LayoutProps) {\n  const [sidebarExpanded, setSidebarExpanded] = useState(true);\n  const [location] = useLocation();\n\n  const currentPage = pageInfo[location as keyof typeof pageInfo] || pageInfo[\"/\"];\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar \n        expanded={sidebarExpanded} \n        onToggle={() => setSidebarExpanded(!sidebarExpanded)} \n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-card border-b border-border px-6\" style={{ height: '65px' }}>\n          <div className=\"flex items-center justify-between h-full\">\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-page-title\">\n                {currentPage.title}\n              </h1>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-page-description\">\n                {currentPage.description}\n              </p>\n            </div>\n\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1836},"client/src/components/Sidebar.tsx":{"content":"import { Mountain, LayoutDashboard, Building, BarChart3, User, PanelLeft } from \"lucide-react\";\nimport { Button } from \"./ui/button\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { SidebarThemeToggle } from \"./ThemeToggle\";\nimport { useState, useEffect } from \"react\";\n\ninterface SidebarProps {\n  expanded: boolean;\n  onToggle: () => void;\n}\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Companies\", href: \"/companies\", icon: Building },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n];\n\nexport default function Sidebar({ expanded, onToggle }: SidebarProps) {\n  const [location] = useLocation();\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  \n  useEffect(() => {\n    setIsTransitioning(true);\n    const timer = setTimeout(() => setIsTransitioning(false), 600);\n    return () => clearTimeout(timer);\n  }, [expanded]);\n\n  return (\n    <div className={cn(\n      \"bg-gray-100 dark:bg-gray-900 border-r border-border flex flex-col rounded-r-2xl shadow-lg relative z-10 sidebar-content-transition\",\n      expanded ? \"sidebar-expanded\" : \"sidebar-collapsed\"\n    )}>\n      {/* Sidebar Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border sidebar-content-transition\">\n        <div className={cn(\"flex items-center sidebar-content-transition\", expanded ? \"space-x-2\" : \"justify-center\")}>\n          <div \n            className={cn(\n              \"w-8 h-8 bg-gradient-to-br from-slate-700 to-slate-900 rounded-lg flex items-center justify-center group relative overflow-hidden sidebar-logo-morph\",\n              !expanded && \"cursor-pointer hover:from-primary hover:to-primary/80 hover:scale-110 hover:rotate-3\"\n            )}\n            onClick={!expanded ? onToggle : undefined}\n          >\n            <Mountain className={cn(\n              \"w-5 h-5 text-white sidebar-icon-transition\",\n              !expanded && \"group-hover:opacity-0 group-hover:scale-75 group-hover:rotate-180\"\n            )} />\n            {!expanded && (\n              <PanelLeft className={cn(\n                \"absolute inset-0 w-4 h-4 text-white sidebar-icon-transition opacity-0 scale-125 m-auto\",\n                \"group-hover:opacity-100 group-hover:scale-100 group-hover:rotate-0\"\n              )} />\n            )}\n          </div>\n          <span className={cn(\n            \"font-semibold text-foreground sidebar-text-fade whitespace-nowrap overflow-hidden\",\n            expanded && !isTransitioning ? \"sidebar-text-fade-in\" : \"sidebar-text-fade-out\"\n          )} data-testid=\"text-app-name\">\n            Mountain\n          </span>\n        </div>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          onClick={onToggle}\n          className={cn(\n            \"h-8 w-8 sidebar-icon-transition\",\n            expanded && !isTransitioning ? \"opacity-100 scale-100\" : \"opacity-0 scale-75\"\n          )}\n          data-testid=\"button-toggle-sidebar\"\n        >\n          <PanelLeft className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 sidebar-content-transition\">\n        <div className={cn(\"sidebar-content-transition\", expanded ? \"\" : \"flex flex-col items-center\")}>\n          {navigation.map((item, index) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  className={cn(\n                    \"sidebar-button-morph overflow-hidden relative group\",\n                    expanded ? \"w-full h-10 justify-start\" : \"w-10 h-10 flex justify-center items-center p-0 rounded-lg sidebar-collapsed-button\",\n                    index > 0 && \"mt-4\",\n                    isActive && \"bg-gray-800 text-white dark:bg-gray-200 dark:text-black shadow-lg\",\n                    !expanded && \"hover:scale-110 hover:shadow-md\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase()}`}\n                >\n                  <Icon className={cn(\n                    \"w-4 h-4 sidebar-icon-transition flex-shrink-0\",\n                    !expanded && \"group-hover:scale-110\"\n                  )} />\n                  <span className={cn(\n                    \"sidebar-text-fade whitespace-nowrap overflow-hidden\",\n                    expanded && !isTransitioning ? \"ml-3 sidebar-text-fade-in\" : \"ml-0 sidebar-text-fade-out\"\n                  )}>\n                    {item.name}\n                  </span>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n\n      {/* Theme Toggle */}\n      <div className={cn(\"border-t border-border sidebar-content-transition\", expanded ? \"px-4 py-2\" : \"px-3 py-2 flex justify-center\")}>\n        <SidebarThemeToggle expanded={expanded} />\n      </div>\n\n      {/* Sidebar Footer */}\n      <div className={cn(\"py-2 border-t border-border sidebar-content-transition\", expanded ? \"px-4\" : \"px-3 flex justify-center\")}>\n        <Link href=\"/profile\">\n          <div className={cn(\n            \"flex items-center rounded-lg hover:bg-accent cursor-pointer sidebar-content-transition group\",\n            expanded ? \"p-2 space-x-3 w-full hover:shadow-sm\" : \"p-2 w-10 h-10 justify-center hover:scale-105 hover:shadow-md\"\n          )}>\n            <div className={cn(\n              \"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0 sidebar-icon-transition\",\n              !expanded && \"group-hover:scale-110\"\n            )}>\n              <span className=\"text-xs font-medium text-primary-foreground\">AJ</span>\n            </div>\n            <div className={cn(\n              \"flex-1 min-w-0 sidebar-text-fade overflow-hidden\",\n              expanded && !isTransitioning ? \"sidebar-text-fade-in\" : \"sidebar-text-fade-out\"\n            )}>\n              <div className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">Alex Johnson</div>\n              <div className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-user-role\">Senior Recruiter</div>\n            </div>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6298},"client/src/components/Stats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { Company } from '@shared/schema';\n\ninterface StatsProps {\n  companies: Company[];\n  totalEmails: number;\n  totalOpens: number;\n  totalClicks: number;\n  totalResponses: number;\n}\n\nexport function Stats({ companies, totalEmails, totalOpens, totalClicks, totalResponses }: StatsProps) {\n  // Calculate stats by company\n  const companyStats = companies.map(company => ({\n    name: company.name.length > 8 ? company.name.substring(0, 8) + '...' : company.name,\n    fullName: company.name,\n    emails: company.totalEmails,\n    opens: company.openCount,\n    clicks: company.clickCount,\n    openRate: company.totalEmails > 0 ? Math.round((company.openCount / company.totalEmails) * 100) : 0,\n    clickRate: company.totalEmails > 0 ? Math.round((company.clickCount / company.totalEmails) * 100) : 0,\n  }));\n\n  // Response rate data\n  const responseData = [\n    { name: 'Responded', value: totalResponses, color: '#22c55e' },\n    { name: 'No Response', value: totalEmails - totalResponses, color: '#e5e7eb' },\n  ];\n\n  // Email tracking over time (mock data)\n  const timelineData = [\n    { date: 'Jul 20', sent: 8, opened: 5, clicked: 2 },\n    { date: 'Jul 25', sent: 12, opened: 9, clicked: 4 },\n    { date: 'Jul 29', sent: 15, opened: 11, clicked: 6 },\n    { date: 'Aug 1', sent: 12, opened: 7, clicked: 6 },\n  ];\n\n  // Funnel data\n  const funnelData = [\n    { stage: 'Emails Sent', count: totalEmails, percentage: 100 },\n    { stage: 'Opened', count: totalOpens, percentage: totalEmails > 0 ? Math.round((totalOpens / totalEmails) * 100) : 0 },\n    { stage: 'Clicked', count: totalClicks, percentage: totalEmails > 0 ? Math.round((totalClicks / totalEmails) * 100) : 0 },\n    { stage: 'Responded', count: totalResponses, percentage: totalEmails > 0 ? Math.round((totalResponses / totalEmails) * 100) : 0 },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Emails</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-total-emails\">{totalEmails}</div>\n            <div className=\"text-sm text-muted-foreground\">Across all campaigns</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Open Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-blue-600\" data-testid=\"text-open-rate\">\n              {totalEmails > 0 ? Math.round((totalOpens / totalEmails) * 100) : 0}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{totalOpens} opens</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Click Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-600\" data-testid=\"text-click-rate\">\n              {totalEmails > 0 ? Math.round((totalClicks / totalEmails) * 100) : 0}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{totalClicks} clicks</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Response Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-purple-600\" data-testid=\"text-response-rate\">\n              {totalEmails > 0 ? Math.round((totalResponses / totalEmails) * 100) : 0}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{totalResponses} responses</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row 1 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Performance by Company</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={companyStats}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip \n                  formatter={(value, name, props) => [\n                    value, \n                    name.charAt(0).toUpperCase() + name.slice(1)\n                  ]}\n                  labelFormatter={(label) => {\n                    const company = companyStats.find(c => c.name === label);\n                    return company?.fullName || label;\n                  }}\n                />\n                <Bar dataKey=\"opens\" fill=\"#3b82f6\" name=\"opens\" />\n                <Bar dataKey=\"clicks\" fill=\"#10b981\" name=\"clicks\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Response Rate Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={responseData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                >\n                  {responseData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Row 2 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Email Activity Timeline</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={timelineData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"sent\" stroke=\"#8884d8\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"opened\" stroke=\"#82ca9d\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"clicked\" stroke=\"#ffc658\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Conversion Funnel</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {funnelData.map((item, index) => (\n                <div key={item.stage} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                    <span className=\"font-medium\">{item.stage}</span>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-right\">\n                      <div className=\"font-bold\">{item.count}</div>\n                      <div className=\"text-sm text-muted-foreground\">{item.percentage}%</div>\n                    </div>\n                    <div className=\"w-32 bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-500 h-2 rounded-full transition-all\"\n                        style={{ width: `${item.percentage}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Company Performance Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Company Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-2\">Company</th>\n                  <th className=\"text-center py-2\">Emails</th>\n                  <th className=\"text-center py-2\">Opens</th>\n                  <th className=\"text-center py-2\">Open Rate</th>\n                  <th className=\"text-center py-2\">Clicks</th>\n                  <th className=\"text-center py-2\">Click Rate</th>\n                  <th className=\"text-center py-2\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {companyStats.map((company, index) => (\n                  <tr key={index} className=\"border-b hover:bg-muted/50\">\n                    <td className=\"py-3 font-medium\" data-testid={`text-company-${index}`}>{company.fullName}</td>\n                    <td className=\"text-center py-3\">{company.emails}</td>\n                    <td className=\"text-center py-3\">{company.opens}</td>\n                    <td className=\"text-center py-3\">\n                      <Badge variant={company.openRate >= 60 ? \"default\" : \"secondary\"}>\n                        {company.openRate}%\n                      </Badge>\n                    </td>\n                    <td className=\"text-center py-3\">{company.clicks}</td>\n                    <td className=\"text-center py-3\">\n                      <Badge variant={company.clickRate >= 30 ? \"default\" : \"secondary\"}>\n                        {company.clickRate}%\n                      </Badge>\n                    </td>\n                    <td className=\"text-center py-3\">\n                      <Badge variant={company.opens > 0 ? \"default\" : \"secondary\"}>\n                        {company.opens > 0 ? \"Active\" : \"No Activity\"}\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10537},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeProviderContextProps {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  actualTheme: 'dark' | 'light';\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderContextProps | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'outreach-pro-theme',\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  const [actualTheme, setActualTheme] = useState<'dark' | 'light'>('light');\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    const updateActualTheme = () => {\n      let resolvedTheme: 'dark' | 'light';\n      \n      if (theme === 'system') {\n        resolvedTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      } else {\n        resolvedTheme = theme;\n      }\n      \n      setActualTheme(resolvedTheme);\n      \n      root.classList.remove('light', 'dark');\n      root.classList.add(resolvedTheme);\n      \n      // Add transition class for smooth theme switching\n      if (!root.classList.contains('theme-transition')) {\n        root.classList.add('theme-transition');\n      }\n    };\n\n    updateActualTheme();\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        updateActualTheme();\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    actualTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n\n  return context;\n};\n","size_bytes":2437},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun, Monitor } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { useTheme } from './ThemeProvider';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Select value={theme} onValueChange={setTheme}>\n      <SelectTrigger className=\"w-40\" data-testid=\"select-theme\">\n        <SelectValue placeholder=\"Select theme\">\n          <div className=\"flex items-center gap-2\">\n            {theme === 'light' && <Sun className=\"w-4 h-4\" />}\n            {theme === 'dark' && <Moon className=\"w-4 h-4\" />}\n            {theme === 'system' && <Monitor className=\"w-4 h-4\" />}\n            <span className=\"capitalize\">{theme}</span>\n          </div>\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent>\n        <SelectItem value=\"light\">\n          <div className=\"flex items-center gap-2\">\n            <Sun className=\"w-4 h-4\" />\n            Light\n          </div>\n        </SelectItem>\n        <SelectItem value=\"dark\">\n          <div className=\"flex items-center gap-2\">\n            <Moon className=\"w-4 h-4\" />\n            Dark\n          </div>\n        </SelectItem>\n        <SelectItem value=\"system\">\n          <div className=\"flex items-center gap-2\">\n            <Monitor className=\"w-4 h-4\" />\n            System\n          </div>\n        </SelectItem>\n      </SelectContent>\n    </Select>\n  );\n}\n\nexport function QuickThemeToggle() {\n  const { actualTheme, setTheme } = useTheme();\n\n  return (\n    <div className=\"relative flex items-center bg-gray-200 dark:bg-gray-800 rounded-lg p-1 overflow-hidden\">\n\n      \n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setTheme('light')}\n        className={`relative z-10 flex items-center justify-center gap-1.5 px-3 py-2 h-auto text-xs transition-colors duration-75 border-0 shadow-none hover:bg-transparent hover:text-current ${\n          actualTheme === 'light' \n            ? 'bg-gray-800 text-white font-medium hover:bg-gray-800 hover:text-white' \n            : 'text-muted-foreground bg-transparent hover:bg-transparent hover:text-muted-foreground'\n        } flex-[1.2]`}\n        data-testid=\"button-theme-light\"\n      >\n        <Sun className={`h-3.5 w-3.5 transition-all duration-75 ${\n          actualTheme === 'light' ? 'scale-110' : 'scale-100'\n        }`} />\n        Light\n      </Button>\n      \n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setTheme('dark')}\n        className={`relative z-10 flex items-center justify-center gap-1.5 px-3 py-2 h-auto text-xs transition-colors duration-75 border-0 shadow-none hover:bg-transparent hover:text-current ${\n          actualTheme === 'dark' \n            ? 'bg-gray-200 text-black font-medium hover:bg-gray-200 hover:text-black' \n            : 'text-muted-foreground bg-transparent hover:bg-transparent hover:text-muted-foreground'\n        } flex-[0.8]`}\n        data-testid=\"button-theme-dark\"\n      >\n        <Moon className={`h-3.5 w-3.5 transition-all duration-75 ${\n          actualTheme === 'dark' ? 'scale-110' : 'scale-100'\n        }`} />\n        Dark\n      </Button>\n    </div>\n  );\n}\n\nexport function SidebarThemeToggle({ expanded }: { expanded: boolean }) {\n  const { actualTheme, setTheme } = useTheme();\n\n  if (!expanded) {\n    return (\n      <Button\n        variant=\"ghost\"\n        onClick={() => setTheme(actualTheme === 'light' ? 'dark' : 'light')}\n        className={`w-10 h-10 flex justify-center items-center p-0 rounded-lg sidebar-collapsed-button ${\n          actualTheme === 'light' \n            ? 'bg-gray-800 text-white hover:bg-gray-800 hover:text-white' \n            : 'bg-gray-200 text-black hover:bg-gray-200 hover:text-black'\n        }`}\n        data-testid=\"button-toggle-theme-collapsed\"\n      >\n        {actualTheme === 'light' ? (\n          <Sun className=\"h-4 w-4\" />\n        ) : (\n          <Moon className=\"h-4 w-4\" />\n        )}\n      </Button>\n    );\n  }\n\n  return <QuickThemeToggle />;\n}\n","size_bytes":4061},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mockData.ts":{"content":"export interface Company {\n  id: number;\n  name: string;\n  website: string;\n  linkedin: string;\n  totalEmails: number;\n  lastAttempt: string;\n  hasOpened: boolean;\n  openCount: number;\n  hasClicked: boolean;\n  clickCount: number;\n  hasResponded: boolean;\n}\n\nexport interface Person {\n  id: number;\n  companyId: number;\n  name: string;\n  email: string;\n  position: string;\n  linkedin: string;\n  attempts: number;\n  lastEmailDate: string;\n  opened: boolean;\n  openCount: number;\n  clicked: boolean;\n  clickCount: number;\n  responded: boolean;\n}\n\nexport interface EmailStat {\n  id: number;\n  personId: number;\n  attemptNumber: number;\n  sentDate: string;\n  openCount: number;\n  clickCount: number;\n  responded: boolean;\n  subject: string;\n}\n\nexport const mockCompanies: Company[] = [\n  {\n    id: 1,\n    name: 'OpenAI',\n    website: 'openai.com',\n    linkedin: 'https://linkedin.com/company/openai',\n    totalEmails: 2,\n    lastAttempt: 'Jul 31',\n    hasOpened: true,\n    openCount: 3,\n    hasClicked: true,\n    clickCount: 1,\n    hasResponded: false,\n  },\n  {\n    id: 2,\n    name: 'Anthropic',\n    website: 'anthropic.com',\n    linkedin: 'https://linkedin.com/company/anthropic',\n    totalEmails: 1,\n    lastAttempt: 'Jul 29',\n    hasOpened: true,\n    openCount: 1,\n    hasClicked: false,\n    clickCount: 0,\n    hasResponded: false,\n  },\n  {\n    id: 3,\n    name: 'Stripe',\n    website: 'stripe.com',\n    linkedin: 'https://linkedin.com/company/stripe',\n    totalEmails: 3,\n    lastAttempt: 'Jul 25',\n    hasOpened: true,\n    openCount: 2,\n    hasClicked: true,\n    clickCount: 2,\n    hasResponded: true,\n  },\n  {\n    id: 4,\n    name: 'Figma',\n    website: 'figma.com',\n    linkedin: 'https://linkedin.com/company/figma',\n    totalEmails: 1,\n    lastAttempt: 'Aug 1',\n    hasOpened: false,\n    openCount: 0,\n    hasClicked: false,\n    clickCount: 0,\n    hasResponded: false,\n  },\n];\n\nexport const mockPeople: Person[] = [\n  {\n    id: 1,\n    companyId: 1,\n    name: 'Alice Smith',\n    email: 'alice@openai.com',\n    position: 'Senior Engineering Manager',\n    linkedin: 'https://linkedin.com/in/alice-smith',\n    attempts: 2,\n    lastEmailDate: '2024-07-31',\n    opened: true,\n    openCount: 3,\n    clicked: true,\n    clickCount: 1,\n    responded: false,\n  },\n  {\n    id: 2,\n    companyId: 1,\n    name: 'Bob Johnson',\n    email: 'bob@openai.com',\n    position: 'Technical Recruiter',\n    linkedin: 'https://linkedin.com/in/bob-johnson',\n    attempts: 0,\n    lastEmailDate: '',\n    opened: false,\n    openCount: 0,\n    clicked: false,\n    clickCount: 0,\n    responded: false,\n  },\n  {\n    id: 3,\n    companyId: 2,\n    name: 'Carol Davis',\n    email: 'carol@anthropic.com',\n    position: 'Head of Engineering',\n    linkedin: 'https://linkedin.com/in/carol-davis',\n    attempts: 1,\n    lastEmailDate: '2024-07-29',\n    opened: true,\n    openCount: 1,\n    clicked: false,\n    clickCount: 0,\n    responded: false,\n  },\n  {\n    id: 4,\n    companyId: 3,\n    name: 'David Wilson',\n    email: 'david@stripe.com',\n    position: 'Software Engineer',\n    linkedin: 'https://linkedin.com/in/david-wilson',\n    attempts: 3,\n    lastEmailDate: '2024-07-25',\n    opened: true,\n    openCount: 2,\n    clicked: true,\n    clickCount: 2,\n    responded: true,\n  },\n  {\n    id: 5,\n    companyId: 4,\n    name: 'Eve Brown',\n    email: 'eve@figma.com',\n    position: 'Design Engineer',\n    linkedin: 'https://linkedin.com/in/eve-brown',\n    attempts: 1,\n    lastEmailDate: '2024-08-01',\n    opened: false,\n    openCount: 0,\n    clicked: false,\n    clickCount: 0,\n    responded: false,\n  },\n];\n\nexport const mockEmailStats: EmailStat[] = [\n  {\n    id: 1,\n    personId: 1,\n    attemptNumber: 1,\n    sentDate: '2024-07-28',\n    openCount: 2,\n    clickCount: 1,\n    responded: false,\n    subject: 'Software Engineer Position - Let\\'s Connect',\n  },\n  {\n    id: 2,\n    personId: 1,\n    attemptNumber: 2,\n    sentDate: '2024-07-31',\n    openCount: 1,\n    clickCount: 0,\n    responded: false,\n    subject: 'Following Up - Software Engineer Role',\n  },\n  {\n    id: 3,\n    personId: 3,\n    attemptNumber: 1,\n    sentDate: '2024-07-29',\n    openCount: 1,\n    clickCount: 0,\n    responded: false,\n    subject: 'Exploring Opportunities at Anthropic',\n  },\n  {\n    id: 4,\n    personId: 4,\n    attemptNumber: 1,\n    sentDate: '2024-07-20',\n    openCount: 1,\n    clickCount: 1,\n    responded: false,\n    subject: 'Software Engineer - Stripe',\n  },\n  {\n    id: 5,\n    personId: 4,\n    attemptNumber: 2,\n    sentDate: '2024-07-23',\n    openCount: 1,\n    clickCount: 1,\n    responded: false,\n    subject: 'Re: Software Engineer - Stripe',\n  },\n  {\n    id: 6,\n    personId: 4,\n    attemptNumber: 3,\n    sentDate: '2024-07-25',\n    openCount: 0,\n    clickCount: 0,\n    responded: true,\n    subject: 'Final Follow-up - Stripe Opportunity',\n  },\n];\n\nexport const mockStats = {\n  totalEmails: 47,\n  totalOpens: 32,\n  totalClicks: 18,\n  totalResponses: 5,\n};\n","size_bytes":4904},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Stats } from \"@/components/Stats\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Analytics() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <Skeleton className=\"h-4 w-24\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-8 w-16 mb-2\" />\n                <Skeleton className=\"h-3 w-32\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-48\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-64 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-muted-foreground\">No data available</p>\n      </div>\n    );\n  }\n\n  return (\n    <Stats\n      companies={stats.companies || []}\n      totalEmails={stats.totalEmails || 0}\n      totalOpens={stats.totalOpens || 0}\n      totalClicks={stats.totalClicks || 0}\n      totalResponses={stats.totalResponses || 0}\n    />\n  );\n}\n","size_bytes":1739},"client/src/pages/Companies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Plus } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport AddCompanyModal from \"@/components/AddCompanyModal\";\nimport { Company } from \"@shared/schema\";\n\nexport default function Companies() {\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  const { data: companies = [], isLoading } = useQuery({\n    queryKey: [\"/api/companies\"],\n  });\n\n  const filteredCompanies = companies.filter((company: Company) => {\n    const matchesSearch = company.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         company.website.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    if (filterStatus === \"all\") return matchesSearch;\n    if (filterStatus === \"responded\") return matchesSearch && company.hasResponded;\n    if (filterStatus === \"not-responded\") return matchesSearch && !company.hasResponded;\n    if (filterStatus === \"attempts-left\") return matchesSearch && company.totalEmails < 3;\n    \n    return matchesSearch;\n  });\n\n  const getCompanyStatus = (company: Company) => {\n    if (company.hasResponded) return \"Responded\";\n    if (company.totalEmails > 0) return \"Active\";\n    return \"Not Started\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Responded\": return \"bg-green-50 dark:bg-green-900/10 border-green-200 dark:border-green-800\";\n      case \"Active\": return \"bg-yellow-50 dark:bg-yellow-900/10 border-yellow-200 dark:border-yellow-800\";\n      default: return \"bg-card border-border\";\n    }\n  };\n\n  const getProgressColor = (company: Company) => {\n    if (company.hasResponded) return \"bg-green-500\";\n    if (company.totalEmails > 0) return \"bg-blue-500\";\n    return \"bg-gray-300\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-between\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Skeleton className=\"h-10 w-64\" />\n            <Skeleton className=\"h-10 w-48\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-6 w-32 mb-2\" />\n                <Skeleton className=\"h-4 w-24 mb-4\" />\n                <Skeleton className=\"h-16 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with filters and search */}\n      <div className=\"flex flex-col sm:flex-row gap-4 justify-between\">\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search companies...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 w-64\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Companies</SelectItem>\n              <SelectItem value=\"responded\">Responded</SelectItem>\n              <SelectItem value=\"not-responded\">Not Responded</SelectItem>\n              <SelectItem value=\"attempts-left\">Attempts Left</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-company\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Company\n        </Button>\n      </div>\n\n      {/* Company Cards Grid */}\n      {filteredCompanies.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm || filterStatus !== \"all\" ? \"No companies match your search criteria\" : \"No companies added yet\"}\n            </p>\n            <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-first-company\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Company\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredCompanies.map((company: Company, index: number) => {\n            const status = getCompanyStatus(company);\n            const progress = Math.min((company.totalEmails / 3) * 100, 100);\n            \n            return (\n              <Card key={company.id} className={getStatusColor(status)}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold\" data-testid={`text-company-${index}`}>\n                        {company.name}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">{company.website}</p>\n                    </div>\n                    {status !== \"Not Started\" && (\n                      <Badge \n                        className={\n                          status === \"Responded\" \n                            ? \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\"\n                            : \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\"\n                        }\n                      >\n                        {status}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    {/* Progress bar */}\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Emails Sent</span>\n                        <span data-testid={`text-email-progress-${index}`}>{company.totalEmails} / 3</span>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full transition-all ${getProgressColor(company)}`}\n                          style={{ width: `${progress}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                    \n                    {/* Stats */}\n                    <div className=\"grid grid-cols-3 gap-2 text-center\">\n                      <div>\n                        <div className=\"text-xs text-muted-foreground\">Opens</div>\n                        <div className={`text-sm font-medium ${company.openCount > 0 ? 'text-green-600' : 'text-muted-foreground'}`}>\n                          {company.openCount > 0 ? `${company.openCount}x` : '0'}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-muted-foreground\">Clicks</div>\n                        <div className={`text-sm font-medium ${company.clickCount > 0 ? 'text-blue-600' : 'text-muted-foreground'}`}>\n                          {company.clickCount > 0 ? `${company.clickCount}x` : '0'}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-muted-foreground\">Last</div>\n                        <div className=\"text-sm font-medium\">{company.lastAttempt || 'Never'}</div>\n                      </div>\n                    </div>\n                    \n                    <Button variant=\"outline\" className=\"w-full\" data-testid={`button-view-details-${index}`}>\n                      View Details\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <AddCompanyModal \n        open={showAddModal} \n        onOpenChange={setShowAddModal} \n      />\n    </div>\n  );\n}\n","size_bytes":8818},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport AddCompanyModal from \"@/components/AddCompanyModal\";\nimport { Company } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [showAddModal, setShowAddModal] = useState(false);\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: companies = [], isLoading: isLoadingCompanies } = useQuery({\n    queryKey: [\"/api/companies\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <Skeleton className=\"h-4 w-24\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-8 w-16 mb-2\" />\n                <Skeleton className=\"h-3 w-32\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (company: Company) => {\n    if (company.hasResponded) {\n      return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">Responded</Badge>;\n    }\n    if (company.totalEmails > 0) {\n      return <Badge variant=\"secondary\">In Progress</Badge>;\n    }\n    return <Badge variant=\"outline\">Not Started</Badge>;\n  };\n\n  const getEmailProgress = (company: Company) => {\n    const progress = Math.min((company.totalEmails / 3) * 100, 100);\n    return progress;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Emails Sent</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-emails-sent\">{stats?.totalEmails || 0}</div>\n            <div className=\"text-xs text-green-600\">+12% from last month</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Opens</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-opens\">{stats?.totalOpens || 0}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {stats?.totalEmails > 0 ? Math.round((stats.totalOpens / stats.totalEmails) * 100) : 0}% open rate\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Clicks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-clicks\">{stats?.totalClicks || 0}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {stats?.totalEmails > 0 ? Math.round((stats.totalClicks / stats.totalEmails) * 100) : 0}% click rate\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Responses</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-responses\">{stats?.totalResponses || 0}</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {stats?.totalEmails > 0 ? Math.round((stats.totalResponses / stats.totalEmails) * 100) : 0}% response rate\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Company Overview Table */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Company Overview</CardTitle>\n          <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-company\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Company\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {isLoadingCompanies ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : companies.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">No companies added yet</p>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowAddModal(true)} \n                className=\"mt-4\"\n                data-testid=\"button-add-first-company\"\n              >\n                Add Your First Company\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr className=\"border-b border-border\">\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Company</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Emails</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Last Attempt</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Opened</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Clicked</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-6 text-sm font-medium text-muted-foreground\">Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {companies.map((company: Company, index: number) => (\n                    <tr key={company.id} className=\"border-b border-border hover:bg-muted/50\">\n                      <td className=\"py-4 px-6\">\n                        <div>\n                          <div className=\"font-medium text-foreground\" data-testid={`text-company-name-${index}`}>\n                            {company.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">{company.website}</div>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-6 text-sm\" data-testid={`text-email-count-${index}`}>\n                        {company.totalEmails} / 3\n                      </td>\n                      <td className=\"py-4 px-6 text-sm text-muted-foreground\">\n                        {company.lastAttempt || \"Never\"}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        {company.hasOpened ? (\n                          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\">\n                            ✅ {company.openCount}x\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">❌</Badge>\n                        )}\n                      </td>\n                      <td className=\"py-4 px-6\">\n                        {company.hasClicked ? (\n                          <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\">\n                            ✅ {company.clickCount}x\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">❌</Badge>\n                        )}\n                      </td>\n                      <td className=\"py-4 px-6\">{getStatusBadge(company)}</td>\n                      <td className=\"py-4 px-6\">\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-company-${index}`}>\n                          View\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <AddCompanyModal \n        open={showAddModal} \n        onOpenChange={setShowAddModal} \n      />\n    </div>\n  );\n}\n","size_bytes":8658},"client/src/pages/Profile.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { User, Bell, Shield, Download, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n\n  const handleUpdateProfile = () => {\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile has been updated successfully.\",\n    });\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your data export has been initiated. You'll receive an email when it's ready.\",\n    });\n  };\n\n  const handleDeleteAccount = () => {\n    toast({\n      title: \"Account Deletion\",\n      description: \"Please contact support to delete your account.\",\n      variant: \"destructive\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-4xl\">\n      {/* Profile Header */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-2xl font-medium text-primary-foreground\">AJ</span>\n            </div>\n            <div className=\"space-y-1\">\n              <h2 className=\"text-2xl font-semibold\" data-testid=\"text-profile-name\">Alex Johnson</h2>\n              <p className=\"text-muted-foreground\">Senior Recruiter at OutreachPro</p>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <span>alex.johnson@outreachpro.com</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <span>San Francisco, CA</span>\n                </div>\n              </div>\n              <div className=\"flex gap-2 pt-2\">\n                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-secondary text-secondary-foreground\">\n                  Pro Plan\n                </span>\n                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs border border-border\">\n                  Verified\n                </span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Personal Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"w-5 h-5\" />\n              Personal Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"full-name\">Full Name</Label>\n                <Input \n                  id=\"full-name\" \n                  defaultValue=\"Alex Johnson\" \n                  data-testid=\"input-full-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"position\">Position</Label>\n                <Input \n                  id=\"position\" \n                  defaultValue=\"Senior Recruiter\" \n                  data-testid=\"input-position\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input \n                id=\"email\" \n                type=\"email\" \n                defaultValue=\"alex.johnson@outreachpro.com\" \n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input \n                  id=\"phone\" \n                  defaultValue=\"+1 (555) 123-4567\" \n                  data-testid=\"input-phone\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"company\">Company</Label>\n                <Input \n                  id=\"company\" \n                  defaultValue=\"OutreachPro\" \n                  data-testid=\"input-company\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input \n                id=\"location\" \n                defaultValue=\"San Francisco, CA\" \n                data-testid=\"input-location\"\n              />\n            </div>\n            <Button \n              onClick={handleUpdateProfile} \n              className=\"w-full\"\n              data-testid=\"button-update-profile\"\n            >\n              Update Profile\n            </Button>\n          </CardContent>\n        </Card>\n\n\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"w-5 h-5\" />\n              Notifications\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-2\">\n              <div>\n                <Label>Email Opens</Label>\n                <p className=\"text-sm text-muted-foreground\">Get notified when emails are opened</p>\n              </div>\n              <Switch defaultChecked data-testid=\"switch-email-opens\" />\n            </div>\n            <hr className=\"border-border\" />\n            <div className=\"flex items-center justify-between py-2\">\n              <div>\n                <Label>Resume Clicks</Label>\n                <p className=\"text-sm text-muted-foreground\">Get notified when resume links are clicked</p>\n              </div>\n              <Switch defaultChecked data-testid=\"switch-resume-clicks\" />\n            </div>\n            <hr className=\"border-border\" />\n            <div className=\"flex items-center justify-between py-2\">\n              <div>\n                <Label>Weekly Report</Label>\n                <p className=\"text-sm text-muted-foreground\">Receive weekly performance summary</p>\n              </div>\n              <Switch data-testid=\"switch-weekly-report\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Privacy & Security */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Privacy & Security\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-2\">\n              <div>\n                <Label>Email Tracking</Label>\n                <p className=\"text-sm text-muted-foreground\">Enable tracking pixels in outbound emails</p>\n              </div>\n              <Switch defaultChecked data-testid=\"switch-email-tracking\" />\n            </div>\n            <hr className=\"border-border\" />\n            <div className=\"space-y-2\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full\" \n                onClick={handleExportData}\n                data-testid=\"button-export-data\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Data\n              </Button>\n              <Button \n                variant=\"destructive\" \n                className=\"w-full\" \n                onClick={handleDeleteAccount}\n                data-testid=\"button-delete-account\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete Account\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n\n    </div>\n  );\n}\n","size_bytes":7920},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}